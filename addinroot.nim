import types

# proc add(a: XXX; b: CsAccessor)
# proc add(a: XXX; b: CsAccessorList)
# proc add(a: XXX; b: CsAliasQualifiedName)
# proc add(a: XXX; b: CsAnonymousMethodExpression)
# proc add(a: XXX; b: CsAnonymousObjectCreationExpression)
# proc add(a: XXX; b: CsAnonymousObjectMemberDeclarator)
# proc add(a: XXX; b: CsArgument)
# proc add(a: XXX; b: CsArrayCreationExpression)
# proc add(a: XXX; b: CsArrayRankSpecifier)
# proc add(a: XXX; b: CsArrayType)
# proc add(a: XXX; b: CsArrowExpressionClause)
# proc add(a: XXX; b: CsAssignmentExpression)
# proc add(a: XXX; b: CsAttribute)
# proc add(a: XXX; b: CsAttributeArgument)
# proc add(a: XXX; b: CsAttributeArgumentList)
# proc add(a: XXX; b: CsAttributeList)
# proc add(a: XXX; b: CsAttributeTargetSpecifier)
# proc add(a: XXX; b: CsAwaitExpression)
# proc add(a: XXX; b: CsBaseExpression)
# proc add(a: XXX; b: CsBaseList)
# proc add(a: XXX; b: CsBinaryExpression)
# proc add(a: XXX; b: CsBracketedArgumentList)
# proc add(a: XXX; b: CsBracketedParameterList)
# proc add(a: XXX; b: CsBreakStatement)
# proc add(a: XXX; b: CsCasePatternSwitchLabel)
# proc add(a: XXX; b: CsCaseSwitchLabel)
# proc add(a: XXX; b: CsCastExpression)
# proc add(a: XXX; b: CsCatch)
# proc add(a: XXX; b: CsCatchClause)
# proc add(a: XXX; b: CsCatchFilterClause)
# proc add(a: XXX; b: CsCheckedExpression)
# proc add(a: XXX; b: CsCheckedStatement)
# proc add(a: XXX; b: CsClassOrStructConstraint)
# proc add(a: XXX; b: CsConditionalAccessExpression)
# proc add(a: XXX; b: CsConditionalExpression)
# proc add(a: XXX; b: CsConstantPattern)
# proc add(a: XXX; b: CsConstructor)
# proc add(a: XXX; b: CsConstructorConstraint)
# proc add(a: XXX; b: CsConstructorInitializer)
# proc add(a: XXX; b: CsContinueStatement)
# proc add(a: XXX; b: CsConversionOperator)
# proc add(a: XXX; b: CsDeclarationExpression)
# proc add(a: XXX; b: CsDeclarationPattern)
# proc add(a: XXX; b: CsDefaultExpression)
# proc add(a: XXX; b: CsDefaultSwitchLabel)
# proc add(a: XXX; b: CsDelegate)
# proc add(a: XXX; b: CsDestructor)
# proc add(a: XXX; b: CsDiscardDesignation)
# proc add(a: XXX; b: CsDoStatement)
# proc add(a: XXX; b: CsElementAccessExpression)
# proc add(a: XXX; b: CsElementBindingExpression)
# proc add(a: XXX; b: CsElseClause)
# proc add(a: XXX; b: CsEmptyStatement)
# proc add(a: XXX; b: CsEnum)
# proc add(a: XXX; b: CsEnumMember)
# proc add(a: XXX; b: CsEqualsValueClause)
# proc add(a: XXX; b: CsEvent)
# proc add(a: XXX; b: CsEventField)
# proc add(a: XXX; b: CsExplicitInterfaceSpecifier)
# proc add(a: XXX; b: CsExpressionStatement)
# proc add(a: XXX; b: CsExternAliasDirective)
# proc add(a: XXX; b: CsField)
# proc add(a: XXX; b: CsFinallyClause)
# proc add(a: XXX; b: CsFixedStatement)
# proc add(a: XXX; b: CsForEachStatement)
# proc add(a: XXX; b: CsForEachVariableStatement)
# proc add(a: XXX; b: CsForStatement)
# proc add(a: XXX; b: CsFromClause)
# proc add(a: XXX; b: CsGenericName)
# proc add(a: XXX; b: CsGlobalStatement)
# proc add(a: XXX; b: CsGotoStatement)
# proc add(a: XXX; b: CsGroupClause)
# proc add(a: XXX; b: CsIfStatement)
# proc add(a: XXX; b: CsImplicitArrayCreationExpression)
# proc add(a: XXX; b: CsImplicitElementAccess)
# proc add(a: XXX; b: CsIncompleteMember)
# proc add(a: XXX; b: CsIndexer)
# proc add(a: XXX; b: CsInitializerExpression)
# proc add(a: XXX; b: CsInterface)
# proc add(a: XXX; b: CsInterpolatedStringExpression)
# proc add(a: XXX; b: CsInterpolatedStringText)
# proc add(a: XXX; b: CsInterpolation)
# proc add(a: XXX; b: CsInterpolationAlignmentClause)
# proc add(a: XXX; b: CsInterpolationFormatClause)
# proc add(a: XXX; b: CsIsPatternExpression)
# proc add(a: XXX; b: CsJoinClause)
# proc add(a: XXX; b: CsJoinIntoClause)
# proc add(a: XXX; b: CsLabeledStatement)
# proc add(a: XXX; b: CsLetClause)
# proc add(a: XXX; b: CsLocalDeclarationStatement)
# proc add(a: XXX; b: CsLocalFunctionStatement)
# proc add(a: XXX; b: CsLockStatement)
# proc add(a: XXX; b: CsMakeRefExpression)
# proc add(a: XXX; b: CsMemberBindingExpression)
# proc add(a: XXX; b: CsNameColon)
# proc add(a: XXX; b: CsNameEquals)
# proc add(a: XXX; b: CsNullableType)
# proc add(a: XXX; b: CsObjectCreationExpression)
# proc add(a: XXX; b: CsOmittedArraySizeExpression)
# proc add(a: XXX; b: CsOmittedTypeArgument)
# proc add(a: XXX; b: CsOperator)
# proc add(a: XXX; b: CsOrderByClause)
# proc add(a: XXX; b: CsOrdering)
# proc add(a: XXX; b: CsParameter)
# proc add(a: XXX; b: CsParameterList)
# proc add(a: XXX; b: CsParenthesizedExpression)
# proc add(a: XXX; b: CsParenthesizedLambdaExpression)
# proc add(a: XXX; b: CsParenthesizedVariableDesignation)
# proc add(a: XXX; b: CsPointerType)
# proc add(a: XXX; b: CsPostfixUnaryExpression)
# proc add(a: XXX; b: CsPrefixUnaryExpression)
# proc add(a: XXX; b: CsProperty)
# proc add(a: XXX; b: CsQueryBody)
# proc add(a: XXX; b: CsQueryContinuation)
# proc add(a: XXX; b: CsQueryExpression)
# proc add(a: XXX; b: CsRefExpression)
# proc add(a: XXX; b: CsRefType)
# proc add(a: XXX; b: CsRefValueExpression)
# proc add(a: XXX; b: CsReturnStatement)
# proc add(a: XXX; b: CsSelectClause)
# proc add(a: XXX; b: CsSimpleBaseType)
# proc add(a: XXX; b: CsSimpleLambdaExpression)
# proc add(a: XXX; b: CsSingleVariableDesignation)
# proc add(a: XXX; b: CsSizeOfExpression)
# proc add(a: XXX; b: CsStackAllocArrayCreationExpression)
# proc add(a: XXX; b: CsStruct)
# proc add(a: XXX; b: CsSwitchSection)
# proc add(a: XXX; b: CsSwitchStatement)
# proc add(a: XXX; b: CsThisExpression)
# proc add(a: XXX; b: CsThrowExpression)
# proc add(a: XXX; b: CsThrowStatement)
# proc add(a: XXX; b: CsTryStatement)
# proc add(a: XXX; b: CsTupleElement)
# proc add(a: XXX; b: CsTupleExpression)
# proc add(a: XXX; b: CsTupleType)
# proc add(a: XXX; b: CsTypeArgumentList)
# proc add(a: XXX; b: CsTypeConstraint)
# proc add(a: XXX; b: CsTypeOfExpression)
# proc add(a: XXX; b: CsTypeParameter)
# proc add(a: XXX; b: CsTypeParameterConstraintClause)
# proc add(a: XXX; b: CsTypeParameterList)
# proc add(a: XXX; b: CsUnsafeStatement)
# proc add(a: XXX; b: CsUsingStatement)
# proc add(a: XXX; b: CsWhenClause)
# proc add(a: XXX; b: CsWhereClause)
# proc add(a: XXX; b: CsWhileStatement)
# proc add(a: XXX; b: CsYieldStatement)
# proc add(a: XXX; b: CsRefTypeExpression)
