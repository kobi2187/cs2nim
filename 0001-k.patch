From fdf988657c2d32fb41217b4994e00f9c67bd11fc Mon Sep 17 00:00:00 2001
From: € <k>
Date: Sat, 2 Jan 2021 13:37:16 +0200
Subject: [PATCH] k

---
 README.md                             |  13 +++++++++++++
 all_needed_data.nim                   |   2 ++
 common_utils.nim                      |  18 ++++++++++++++++++
 constructs/cs_all_constructs.nim      |
 constructs/justtypes.nim              |  29 ++++++++++++++++++++---------
 ideal.nim                             |  50 ++++++++++++++++++++++++++++++++++++++++++--------
 parent_finder.nim                     |  76 ++++++++++++++++++++++++++++++++++++++++++++++++++++++----------------------
 tests/samples/biggerAvlTreeTest.cs    | 272 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 tests/samples/biggerAvlTreeTest.csast |   1 +
 tests/samples/binexp.csast            | 213 +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 tests/samples/enums.csast             |   2 +-
 tests/samples/justClass.csast         |   2 +-
 tests/samples/many_namespaces.csast   |   2 +-
 tests/samples/one_namespace.csast     |   2 +-
 tests/samples/sample1.csast           |   2 +-
 tests/samples/sample10.csast          |   2 +-
 tests/samples/sample11.csast          |   2 +-
 tests/samples/sample12.csast          |   2 +-
 tests/samples/sample2.csast           |   2 +-
 tests/samples/sample3.csast           |   2 +-
 tests/samples/sample4.csast           |   2 +-
 tests/samples/sample5.csast           | 219 +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 tests/samples/sample6.csast           |   2 +-
 tests/samples/sample7.csast           |   2 +-
 tests/samples/sample8.csast           |   2 +-
 tests/samples/sample9.csast           |   2 +-
 tests/samples/xwtButtonTests.csast    |   2 +-
 tests/tgen_tests.nim                  |  21 +++++++++++----------
 type_creator.nim                      | 344 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 type_utils.nim                        |  88 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 writer.nim                            |   2 +-
 writer_utils.nim                      |  21 ++++++++++-----------
 32 files changed, 1238 insertions(+), 845 deletions(-)
 create mode 100644 common_utils.nim
 create mode 100644 tests/samples/biggerAvlTreeTest.cs
 create mode 100644 tests/samples/biggerAvlTreeTest.csast
 create mode 100644 type_utils.nim

diff --git a/README.md b/README.md
index 12d9782..d3fad79 100644
--- a/README.md
+++ b/README.md
@@ -14,6 +14,19 @@ To ease porting efforts of C# to Nim.
 :: type, new, extract, add, gen, unit test.
 
 - namespace
+- enum
+- class (basic)
+  - properties
+    - getters (partial)
+    - setters (partial)
+  - method (basic)
+    - method invocation
+    - assignment
+    - return
+  - ctor (partial)
+  - indexers
+  - object construction
+    - initializer expressions
 
 ### next
 
diff --git a/all_needed_data.nim b/all_needed_data.nim
index d83ba89..1163d5f 100644
--- a/all_needed_data.nim
+++ b/all_needed_data.nim
@@ -59,7 +59,9 @@ proc lastBlockType*(data: AllNeededData;typeStr:string):Option[UUID]=
       return some(id)
   return none(UUID)
 
+import common_utils
 
+import type_utils
 proc makeNeededData*(root: var CsRoot; info: Info; src: string; upcoming: seq[string]): AllNeededData =
   # echo "in makeNeededData"
   result.sourceCode = src
diff --git a/common_utils.nim b/common_utils.nim
new file mode 100644
index 0000000..78173ef
--- /dev/null
+++ b/common_utils.nim
@@ -0,0 +1,18 @@
+# common_utils.nim
+
+
+proc last*[T](s: seq[T]): T =
+  result = s[s.len-1]
+
+proc isEmpty*[T](s: seq[T]): bool =
+  result = (s.len == 0)
+
+import tables
+
+proc pairs[A, B](t: TableRef[A, B]): seq[(A, B)] =
+  for p in pairs(t):
+    result.add p
+
+proc keys[A, B](t: TableRef[A, B]): seq[A] =
+  for k in keys(t):
+    result.add k
diff --git a/constructs/cs_all_constructs.nim b/constructs/cs_all_constructs.nim
index fe20feb..94ec67e 100644
--- a/constructs/cs_all_constructs.nim
+++ b/constructs/cs_all_constructs.nim
@@ -1,3 +1,4 @@
+import ../state_utils
 import nre, sequtils, strutils, sets, re, uuids, options, tables, hashes
 # {.experimental: "codeReordering".}
 import ../types
@@ -40,7 +41,9 @@ method add*(parent: var CsAccessorList; item: CsAccessor) =
 
 # proc add*(parent: var CsAccessorList; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAccessorList): string = assert false
+proc gen*(c: var CsAccessorList): string =
+  assert false
+  echo "--> in  gen*(c: var CsAccessorList)"
 
 # ============= CsAccessor ========
 
@@ -66,7 +69,9 @@ method add*(parent: var CsAccessor; item: Dummy)  =
 
 # proc add*(parent: var CsAccessor; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAccessor): string = assert false
+proc gen*(c: var CsAccessor): string =
+  assert false
+  echo "--> in  gen*(c: var CsAccessor)"
 
 # ============= CsAliasQualifiedName ========
 
@@ -83,7 +88,9 @@ method add*(parent: var CsAliasQualifiedName; item: Dummy)  =
 
 # proc add*(parent: var CsAliasQualifiedName; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAliasQualifiedName): string = assert false
+proc gen*(c: var CsAliasQualifiedName): string =
+  assert false
+  echo "--> in  gen*(c: var CsAliasQualifiedName)"
 
 # ============= CsField ========
 
@@ -104,9 +111,11 @@ method add*(parent: var CsField; item: Dummy)  =
 # proc add*(parent: var CsField; item: Dummy; data: AllNeededData) = parent.add(item)
 
 proc gen*(f: CsField): string =
+
+  echo "--> in  gen*(f: CsField)"
   result = f.name
   if f.ispublic: result &= "*"
-  result &= ": " & f.ttype
+  result &= ": " & f.thetype
 
 # ============= CsAnonymousMethodExpression ========
 
@@ -123,7 +132,9 @@ method add*(parent: var CsAnonymousMethodExpression; item: Dummy)  =
 
 # proc add*(parent: var CsAnonymousMethodExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAnonymousMethodExpression): string = assert false
+proc gen*(c: var CsAnonymousMethodExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsAnonymousMethodExpression)"
 
 # ============= CsAnonymousObjectCreationExpression ========
 
@@ -140,24 +151,27 @@ method add*(parent: var CsAnonymousObjectCreationExpression; item: Dummy)  =
 
 # proc add*(parent: var CsAnonymousObjectCreationExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAnonymousObjectCreationExpression): string = assert false
+proc gen*(c: var CsAnonymousObjectCreationExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsAnonymousObjectCreationExpression)"
 
 # ============= CsAnonymousObjectMemberDeclarator ========
 
 proc newCs*(t: typedesc[CsAnonymousObjectMemberDeclarator]; name: string): CsAnonymousObjectMemberDeclarator =
   new result
   result.typ = $typeof(t)
-#TODO(create:CsAnonymousObjectMemberDeclarator)
 
 proc extract*(t: typedesc[CsAnonymousObjectMemberDeclarator]; info: Info): CsAnonymousObjectMemberDeclarator = assert false
 
 method add*(parent: var CsAnonymousObjectMemberDeclarator; item: Dummy)  =
   echo "!!! ---->> unimplemented:  method add*(parent: var CsAnonymousObjectMemberDeclarator; item: Dummy) "
   if stopEarly: assert false
 
 # proc add*(parent: var CsAnonymousObjectMemberDeclarator; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAnonymousObjectMemberDeclarator): string = assert false
+proc gen*(c: var CsAnonymousObjectMemberDeclarator): string =
+  assert false
+  echo "--> in  gen*(c: var CsAnonymousObjectMemberDeclarator)"
 
 # ============= CsArgumentList ========
 
@@ -175,6 +189,8 @@ proc replacementGenericTypes (s:string): string =
   else: result = s
 
 proc gen*(c: var CsArgumentList): string =
+
+  echo "--> in  gen*(c: var CsArgumentList)"
   if not c.isNil:
     result = c.args.join(", ").replacementGenericTypes()
 
@@ -191,7 +207,9 @@ proc extract*(t: typedesc[CsArgument]; info: Info): CsArgument =
 
 # proc add*(parent: var CsArgument; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsArgument): string = assert false
+proc gen*(c: var CsArgument): string =
+  assert false
+  echo "--> in  gen*(c: var CsArgument)"
 
 # ============= CsArrayCreationExpression ========
 
@@ -208,7 +226,9 @@ method add*(parent: var CsArrayCreationExpression; item: Dummy)  =
 
 # proc add*(parent: var CsArrayCreationExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsArrayCreationExpression): string = assert false
+proc gen*(c: var CsArrayCreationExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsArrayCreationExpression)"
 
 # ============= CsArrayRankSpecifier ========
 
@@ -225,7 +245,9 @@ method add*(parent: var CsArrayRankSpecifier; item: Dummy)  =
 
 # proc add*(parent: var CsArrayRankSpecifier; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsArrayRankSpecifier): string = assert false
+proc gen*(c: var CsArrayRankSpecifier): string =
+  assert false
+  echo "--> in  gen*(c: var CsArrayRankSpecifier)"
 
 # ============= CsArrayType ========
 
@@ -242,7 +264,9 @@ method add*(parent: var CsArrayType; item: Dummy)  =
 
 # proc add*(parent: var CsArrayType; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsArrayType): string = assert false
+proc gen*(c: var CsArrayType): string =
+  assert false
+  echo "--> in  gen*(c: var CsArrayType)"
 
 # ============= CsArrowExpressionClause ========
 
@@ -259,15 +283,19 @@ method add*(parent: var CsArrowExpressionClause; item: Dummy)  =
 
 # proc add*(parent: var CsArrowExpressionClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsArrowExpressionClause): string = assert false
+proc gen*(c: var CsArrowExpressionClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsArrowExpressionClause)"
 
 # ============= CsAssignmentExpression ========
 
 # TODO MAJOR TODO: instead of everyone matching bodyexpr and stored as a seq in various body fields, figure out which ones really do, maybe 3 types, then put these expressions in them accordingly.
 # then these are just lines, where line is a statement terminating with ';'
 # that is, create a more proper inheritence hierarchy. on paper, and code based on short unit tests.
 
-method gen*(c: CsAssignmentExpression): string = assert false #TODO(gen:CsAssignmentExpression)
+method gen*(c: CsAssignmentExpression): string =
+  assert false #TODO(gen:CsAssignmentExpression)
+  echo "--> in  gen*(c: CsAssignmentExpression)"
 
 # ============= CsAttributeArgumentList ========
 
@@ -284,7 +312,9 @@ method add*(parent: var CsAttributeArgumentList; item: Dummy)  =
 
 # proc add*(parent: var CsAttributeArgumentList; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAttributeArgumentList): string = assert false
+proc gen*(c: var CsAttributeArgumentList): string =
+  assert false
+  echo "--> in  gen*(c: var CsAttributeArgumentList)"
 
 # ============= CsAttributeArgument ========
 
@@ -301,7 +331,9 @@ method add*(parent: var CsAttributeArgument; item: Dummy)  =
 
 # proc add*(parent: var CsAttributeArgument; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAttributeArgument): string = assert false
+proc gen*(c: var CsAttributeArgument): string =
+  assert false
+  echo "--> in  gen*(c: var CsAttributeArgument)"
 
 proc newCs*(t: typedesc[CsAttributeList]; name: string): CsAttributeList =
   new result
@@ -315,7 +347,9 @@ method add*(parent: var CsAttributeList; item: Dummy)  =
   if stopEarly: assert false
 
 # proc add*(parent: var CsAttributeList; item: Dummy; data: AllNeededData) = parent.add(item)
-proc gen*(c: var CsAttributeList): string = assert false
+proc gen*(c: var CsAttributeList): string =
+  assert false
+  echo "--> in  gen*(c: var CsAttributeList)"
 
 # ============= CsAttribute ========
 
@@ -332,7 +366,9 @@ method add*(parent: var CsAttribute; item: Dummy)  =
 
 # proc add*(parent: var CsAttribute; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAttribute): string = assert false
+proc gen*(c: var CsAttribute): string =
+  assert false
+  echo "--> in  gen*(c: var CsAttribute)"
 
 # ============= CsAttributeTargetSpecifier ========
 
@@ -349,7 +385,9 @@ method add*(parent: var CsAttributeTargetSpecifier; item: Dummy)  =
 
 # proc add*(parent: var CsAttributeTargetSpecifier; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAttributeTargetSpecifier): string = assert false
+proc gen*(c: var CsAttributeTargetSpecifier): string =
+  assert false
+  echo "--> in  gen*(c: var CsAttributeTargetSpecifier)"
 
 # ============= CsAwaitExpression ========
 
@@ -366,7 +404,9 @@ method add*(parent: var CsAwaitExpression; item: Dummy)  =
 
 # proc add*(parent: var CsAwaitExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsAwaitExpression): string = assert false
+proc gen*(c: var CsAwaitExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsAwaitExpression)"
 
 # ============= CsBaseExpression ========
 
@@ -383,7 +423,9 @@ method add*(parent: var CsBaseExpression; item: Dummy)  =
 
 # proc add*(parent: var CsBaseExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsBaseExpression): string = assert false
+proc gen*(c: var CsBaseExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsBaseExpression)"
 
 # ============= CsBaseList ========
 
@@ -402,7 +444,9 @@ method add*(parent: var CsBaseList; item: Dummy)  =
 
 # proc add*(parent: var CsBaseList; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsBaseList): string = assert false
+proc gen*(c: var CsBaseList): string =
+  assert false
+  echo "--> in  gen*(c: var CsBaseList)"
 
 # ============= CsBinaryExpression ========
 
@@ -425,7 +469,9 @@ method add*(parent: var CsBinaryExpression; item: Dummy)  =
   if stopEarly: assert false
 # proc add*(parent: var CsBinaryExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsBinaryExpression): string = assert false
+proc gen*(c: var CsBinaryExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsBinaryExpression)"
 
 # ============= CsBracketedArgumentList ========
 
@@ -442,7 +488,9 @@ method add*(parent: var CsBracketedArgumentList; item: Dummy)  =
 
 # proc add*(parent: var CsBracketedArgumentList; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsBracketedArgumentList): string = assert false
+proc gen*(c: var CsBracketedArgumentList): string =
+  assert false
+  echo "--> in  gen*(c: var CsBracketedArgumentList)"
 
 # ============= CsBracketedParameterList ========
 
@@ -461,7 +509,9 @@ method add*(parent: var CsBracketedParameterList; item: Dummy)  =
 
 # proc add*(parent: var CsBracketedParameterList; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsBracketedParameterList): string = assert false
+proc gen*(c: var CsBracketedParameterList): string =
+  assert false
+  echo "--> in  gen*(c: var CsBracketedParameterList)"
 
 # ============= CsBreakStatement ========
 
@@ -478,7 +528,9 @@ method add*(parent: var CsBreakStatement; item: Dummy)  =
 
 # proc add*(parent: var CsBreakStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsBreakStatement): string = assert false
+proc gen*(c: var CsBreakStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsBreakStatement)"
 
 # ============= CsCasePatternSwitchLabel ========
 
@@ -495,7 +547,9 @@ method add*(parent: var CsCasePatternSwitchLabel; item: Dummy)  =
 
 # proc add*(parent: var CsCasePatternSwitchLabel; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsCasePatternSwitchLabel): string = assert false
+proc gen*(c: var CsCasePatternSwitchLabel): string =
+  assert false
+  echo "--> in  gen*(c: var CsCasePatternSwitchLabel)"
 
 # ============= CsCaseSwitchLabel ========
 
@@ -512,7 +566,9 @@ method add*(parent: var CsCaseSwitchLabel; item: Dummy)  =
 
 # proc add*(parent: var CsCaseSwitchLabel; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsCaseSwitchLabel): string = assert false
+proc gen*(c: var CsCaseSwitchLabel): string =
+  assert false
+  echo "--> in  gen*(c: var CsCaseSwitchLabel)"
 
 # ============= CsCastExpression ========
 
@@ -529,7 +585,9 @@ method add*(parent: var CsCastExpression; item: Dummy)  =
 
 # proc add*(parent: var CsCastExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsCastExpression): string = assert false
+proc gen*(c: var CsCastExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsCastExpression)"
 
 # ============= CsCatchClause ========
 
@@ -546,7 +604,9 @@ method add*(parent: var CsCatchClause; item: Dummy)  =
 
 # proc add*(parent: var CsCatchClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsCatchClause): string = assert false
+proc gen*(c: var CsCatchClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsCatchClause)"
 
 # ============= CsCatchFilterClause ========
 
@@ -563,7 +623,9 @@ method add*(parent: var CsCatchFilterClause; item: Dummy)  =
 
 # proc add*(parent: var CsCatchFilterClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsCatchFilterClause): string = assert false
+proc gen*(c: var CsCatchFilterClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsCatchFilterClause)"
 
 # ============= CsCatch ========
 
@@ -580,7 +642,9 @@ method add*(parent: var CsCatch; item: Dummy)  =
 
 # proc add*(parent: var CsCatch; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsCatch): string = assert false
+proc gen*(c: var CsCatch): string =
+  assert false
+  echo "--> in  gen*(c: var CsCatch)"
 
 # ============= CsCheckedExpression ========
 
@@ -597,7 +661,9 @@ method add*(parent: var CsCheckedExpression; item: Dummy)  =
 
 # proc add*(parent: var CsCheckedExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsCheckedExpression): string = assert false
+proc gen*(c: var CsCheckedExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsCheckedExpression)"
 
 # ============= CsCheckedStatement ========
 
@@ -614,31 +680,21 @@ method add*(parent: var CsCheckedStatement; item: Dummy)  =
 
 # proc add*(parent: var CsCheckedStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsCheckedStatement): string = assert false
+proc gen*(c: var CsCheckedStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsCheckedStatement)"
 
 method add*(parent:var CsProperty, item:CsAccessorList) =
   parent.acclist = item
 
 method add*(parent:var CsMethod, item: CsAssignmentExpression)=
   parent.body.add item
 
-proc `$`*(e:CsEnum):string=
-  result = "enum: (name: " & e.name
-  result &= "; items: " & $e.items.len
-  result &= " )"
 
 method add*(c:var CsIndexer, item: CsAccessorList) =
   c.aclist=item
 # ============= CsClass ========
 
-proc `$`*(c:CsClass) :string=
-  result = "class: (name: " & c.name
-  result &= "; methods: " & $c.methods.len
-  result &= "; properties: " & $c.properties.len
-  result &= ")"
-
-proc hasIndexer*(c: CsClass): bool = not c.indexer.isNil
-
 proc newCs*(t: typedesc[CsClass]; name: string; base = ""; impls: seq[string] = @[]): CsClass =
   new result
   result.typ = $typeof(t)
@@ -659,22 +715,28 @@ method addSelfParam(m: var CsMethod) =
   m.parameterList.parameters.insert(@[p], 0)
 
 proc gen*(p: CsParameter): string =
+
+  echo "--> in  gen*(p: CsParameter)"
   result = p.name & ": "
   if p.isRef:
     result &= "var "
   result &= p.ptype.strip
 
 proc gen*(p: CsParameterList): string =
+
+  echo "--> in  gen*(p: CsParameterList)"
   result = p.parameters.mapIt(it.gen()).join("; ")
 
 proc lowerFirst(s:string) : string =
   if s.len == 0: return ""
   if s.len == 1:
     result = "" & s[0].toLowerAscii
   if s.len > 1 :
-    result = s[0].toLowerAscii & s[1..^1]
+    result = s.lowerFirst()
 
 proc gen*(m: var CsMethod): string =
+
+  echo "--> in  gen*(m: var CsMethod)"
   echo "generating method (wip): " & m.name
   if not m.isStatic: result = "method " else: result = "proc "
   if not m.isStatic:
@@ -700,6 +762,8 @@ proc gen*(m: var CsMethod): string =
   result &= body
 
 method gen*(c: var CsConstructor): string =
+
+  echo "--> in  gen*(c: var CsConstructor)"
   echo "generating ctor (wip): (new)" & c.name
   result = "proc "
 
@@ -717,6 +781,8 @@ method gen*(c: var CsConstructor): string =
   result &= body
 
 proc gen*(c: var CsIndexer): string =
+
+  echo "--> in  gen*(c: var CsIndexer)"
   echo "generating indexer"
   let x = c.firstVarType.rsplit(".", 1)[^1]
   var setPart, getPart : string
@@ -729,29 +795,35 @@ proc gen*(c: var CsIndexer): string =
   result &= getPart & "\n" & setPart
 
 proc gen*(c: CsProperty): string =
+  echo "--> in  gen*(c: CsProperty)"
   result = ""
   if c.hasGet:
     result &= # this is a getter
-      "method " & c.name[0].toLowerAscii & c.name[1..^1] &
+      "method " & c.name.lowerFirst() &
       "*(this: " & c.parentClass & "): " & c.retType & " = " &
       "this.u_" & c.name
   if c.hasSet:
     result &=
-      "method " & c.name[0].toLowerAscii & c.name[1..^1] &
+      "method " & c.name.lowerFirst &
       "*(this: " & c.parentClass & ", value: " & c.retType & "): " & c.retType & " = " &
       "this.u_" & c.name & " = value"
 
+# import ../type_utils
+
+proc hasIndexer*(c: CsClass): bool =
+  result = not c.indexer.isNil
+
 proc gen*(c: CsClass): string =
+  echo "--> in  gen*(c: CsClass)"
   echo "generating class:" & c.name
   if c.isNil: result = "" else: result &= "type " & c.name & "* = ref object"
   if c.extends != "": result &= " of " & c.extends
   result &= "\r\n\r\n"
 
   echo "methods count: " & $c.methods.len
   echo "generating methods:"
 
   for m in c.methods.mitems:
-
     result &= m.gen()
     result &= "\r\n"
   echo "ctors count: " & $c.ctors.len
@@ -778,11 +850,26 @@ method add*(parent: var CsClass; m: CsMethod) =
   parent.lastAddedTo = some(Methods)
   m.parentClass = parent.name
 
-method add*(parent: var CsClass; item: CsProperty) =
 
+proc addField(parent:CsClass; name, typ:string) =
+  var f = newCs(CsField)
+  f.name = name
+  f.thetype = typ
+  parent.fields.add f
+
+proc addFieldForProperty(parent:CsClass,item:CsProperty) =
+  let fieldName = "u_" & item.name
+  let fieldType = item.retType
+  parent.addField(fieldName, fieldType)
+
+
+method add*(parent: var CsClass; item: CsProperty) =
   parent.properties.add item
   parent.lastAddedTo = some(Properties)
   item.parentClass = parent.name
+  if (item.hasGet or item.hasSet) and
+    item.bodyGet.len == 0 and item.bodySet.len == 0:
+      parent.addFieldForProperty(item)
 # proc add*(parent: var CsClass; item: CsProperty; data: AllNeededData) = parent.add(item) # TODO
 
 method add*(parent: var CsClass; item: CsIndexer) =
@@ -814,7 +901,9 @@ method add*(parent: var CsClassOrStructConstraint; item: Dummy)  =
 
 # proc add*(parent: var CsClassOrStructConstraint; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsClassOrStructConstraint): string = assert false
+proc gen*(c: var CsClassOrStructConstraint): string =
+  assert false
+  echo "--> in  gen*(c: var CsClassOrStructConstraint)"
 
 # ============= CsConditionalAccessExpression ========
 
@@ -831,7 +920,9 @@ method add*(parent: var CsConditionalAccessExpression; item: Dummy)  =
 
 # proc add*(parent: var CsConditionalAccessExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsConditionalAccessExpression): string = assert false
+proc gen*(c: var CsConditionalAccessExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsConditionalAccessExpression)"
 
 # ============= CsConditionalExpression ========
 
@@ -848,7 +939,9 @@ method add*(parent: var CsConditionalExpression; item: Dummy)  =
 
 # proc add*(parent: var CsConditionalExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsConditionalExpression): string = assert false
+proc gen*(c: var CsConditionalExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsConditionalExpression)"
 
 # ============= CsConstantPattern ========
 
@@ -865,7 +958,9 @@ method add*(parent: var CsConstantPattern; item: Dummy)  =
 
 # proc add*(parent: var CsConstantPattern; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsConstantPattern): string = assert false
+proc gen*(c: var CsConstantPattern): string =
+  assert false
+  echo "--> in  gen*(c: var CsConstantPattern)"
 
 # ============= CsConstructorConstraint ========
 
@@ -882,22 +977,26 @@ method add*(parent: var CsConstructorConstraint; item: Dummy)  =
 
 # proc add*(parent: var CsConstructorConstraint; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsConstructorConstraint): string = assert false
+proc gen*(c: var CsConstructorConstraint): string =
+  assert false
+  echo "--> in  gen*(c: var CsConstructorConstraint)"
 
 # ============= CsConstructorInitializer ========
 
-proc newCs*(t: typedesc[CsConstructorInitializer]; name: string): CsConstructorInitializer =
+proc newCs*(t: typedesc[CsConstructorInitializer]): CsConstructorInitializer =
   new result
   result.typ = $typeof(t)
-#TODO(create:CsConstructorInitializer)
+
 
 proc extract*(t: typedesc[CsConstructorInitializer]; info: Info): CsConstructorInitializer =
   echo info
-  new result # TODO?
+  result = newCs(CsConstructorInitializer)
 
 # proc add*(parent: var CsConstructorInitializer; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsConstructorInitializer): string = assert false
+proc gen*(c: var CsConstructorInitializer): string =
+  assert false
+  echo "--> in  gen*(c: var CsConstructorInitializer)"
 
 # ============= CsConstructor ========
 
@@ -937,7 +1036,9 @@ method add*(parent: var CsContinueStatement; item: Dummy)  =
 
 # proc add*(parent: var CsContinueStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsContinueStatement): string = assert false
+proc gen*(c: var CsContinueStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsContinueStatement)"
 
 # ============= CsConversionOperator ========
 
@@ -954,7 +1055,9 @@ method add*(parent: var CsConversionOperator; item: Dummy)  =
 
 # proc add*(parent: var CsConversionOperator; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsConversionOperator): string = assert false
+proc gen*(c: var CsConversionOperator): string =
+  assert false
+  echo "--> in  gen*(c: var CsConversionOperator)"
 
 # ============= CsDeclarationExpression ========
 
@@ -971,7 +1074,9 @@ method add*(parent: var CsDeclarationExpression; item: Dummy)  =
 
 # proc add*(parent: var CsDeclarationExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsDeclarationExpression): string = assert false
+proc gen*(c: var CsDeclarationExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsDeclarationExpression)"
 
 # ============= CsDeclarationPattern ========
 
@@ -988,7 +1093,9 @@ method add*(parent: var CsDeclarationPattern; item: Dummy)  =
 
 # proc add*(parent: var CsDeclarationPattern; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsDeclarationPattern): string = assert false
+proc gen*(c: var CsDeclarationPattern): string =
+  assert false
+  echo "--> in  gen*(c: var CsDeclarationPattern)"
 
 # ============= CsDefaultExpression ========
 
@@ -1005,7 +1112,9 @@ method add*(parent: var CsDefaultExpression; item: Dummy)  =
 
 # proc add*(parent: var CsDefaultExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsDefaultExpression): string = assert false
+proc gen*(c: var CsDefaultExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsDefaultExpression)"
 
 # ============= CsDefaultSwitchLabel ========
 
@@ -1022,7 +1131,9 @@ method add*(parent: var CsDefaultSwitchLabel; item: Dummy)  =
 
 # proc add*(parent: var CsDefaultSwitchLabel; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsDefaultSwitchLabel): string = assert false
+proc gen*(c: var CsDefaultSwitchLabel): string =
+  assert false
+  echo "--> in  gen*(c: var CsDefaultSwitchLabel)"
 
 # ============= CsDelegate ========
 
@@ -1039,7 +1150,9 @@ method add*(parent: var CsDelegate; item: Dummy)  =
 
 # proc add*(parent: var CsDelegate; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsDelegate): string = assert false
+proc gen*(c: var CsDelegate): string =
+  assert false
+  echo "--> in  gen*(c: var CsDelegate)"
 
 # ============= CsDestructor ========
 
@@ -1056,7 +1169,9 @@ method add*(parent: var CsDestructor; item: Dummy)  =
 
 # proc add*(parent: var CsDestructor; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsDestructor): string = assert false
+proc gen*(c: var CsDestructor): string =
+  assert false
+  echo "--> in  gen*(c: var CsDestructor)"
 
 # ============= CsDiscardDesignation ========
 
@@ -1073,7 +1188,9 @@ method add*(parent: var CsDiscardDesignation; item: Dummy)  =
 
 # proc add*(parent: var CsDiscardDesignation; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsDiscardDesignation): string = assert false
+proc gen*(c: var CsDiscardDesignation): string =
+  assert false
+  echo "--> in  gen*(c: var CsDiscardDesignation)"
 
 # ============= CsDoStatement ========
 
@@ -1090,7 +1207,9 @@ method add*(parent: var CsDoStatement; item: Dummy)  =
 
 # proc add*(parent: var CsDoStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsDoStatement): string = assert false
+proc gen*(c: var CsDoStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsDoStatement)"
 
 # ============= CsElementAccessExpression ========
 
@@ -1107,7 +1226,9 @@ method add*(parent: var CsElementAccessExpression; item: Dummy)  =
 
 # proc add*(parent: var CsElementAccessExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsElementAccessExpression): string = assert false
+proc gen*(c: var CsElementAccessExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsElementAccessExpression)"
 
 # ============= CsElementBindingExpression ========
 
@@ -1124,7 +1245,9 @@ method add*(parent: var CsElementBindingExpression; item: Dummy)  =
 
 # proc add*(parent: var CsElementBindingExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsElementBindingExpression): string = assert false
+proc gen*(c: var CsElementBindingExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsElementBindingExpression)"
 
 # ============= CsElseClause ========
 
@@ -1141,7 +1264,9 @@ method add*(parent: var CsElseClause; item: Dummy)  =
 
 # proc add*(parent: var CsElseClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsElseClause): string = assert false
+proc gen*(c: var CsElseClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsElseClause)"
 
 # ============= CsEmptyStatement ========
 
@@ -1158,7 +1283,9 @@ method add*(parent: var CsEmptyStatement; item: Dummy)  =
 
 # proc add*(parent: var CsEmptyStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsEmptyStatement): string = assert false
+proc gen*(c: var CsEmptyStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsEmptyStatement)"
 
 proc newCs*(t: typedesc[CsEnumMember]; name, value: auto): CsEnumMember =
   new result
@@ -1182,6 +1309,8 @@ method add*(em: CsEnumMember; val: string) =
   else: echo "value is already set:`", em.value, "`. got `",val ,"`;"
 
 proc gen*(e: CsEnumMember): string =
+
+  echo "--> in  gen*(e: CsEnumMember)"
   result = e.name
   if e.value != "": result &= " = " & $e.value
 
@@ -1202,6 +1331,8 @@ method add*(parent: var CsEnum; item: CsEnumMember) =
 # proc add*(parent: var CsEnum; item: CsEnumMember; data: AllNeededData) = parent.add(item) # TODO
 
 proc gen*(e: CsEnum): string =
+
+  echo "--> in  gen*(e: CsEnum)"
   echo "members count:" & $e.items.len
 
   result = "type " & e.name & "* = enum"
@@ -1232,7 +1363,9 @@ method add*(parent: var CsEqualsValueClause; item: Dummy)  =
 
 # proc add*(parent: var CsEqualsValueClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsEqualsValueClause): string = assert false
+proc gen*(c: var CsEqualsValueClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsEqualsValueClause)"
 
 # ============= CsEventField ========
 
@@ -1249,7 +1382,9 @@ method add*(parent: var CsEventField; item: Dummy)  =
 
 # proc add*(parent: var CsEventField; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsEventField): string = assert false
+proc gen*(c: var CsEventField): string =
+  assert false
+  echo "--> in  gen*(c: var CsEventField)"
 
 # ============= CsEvent ========
 
@@ -1266,7 +1401,9 @@ method add*(parent: var CsEvent; item: Dummy)  =
 
 # proc add*(parent: var CsEvent; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsEvent): string = assert false
+proc gen*(c: var CsEvent): string =
+  assert false
+  echo "--> in  gen*(c: var CsEvent)"
 
 # ============= CsExplicitInterfaceSpecifier ========
 
@@ -1322,30 +1459,40 @@ method add*(parent: var CsExpressionStatement; item: CsInvocationExpression) =
 # proc add*(parent: var CsExpressionStatement; item: CsInvocationExpression; data: AllNeededData) = parent.add(item) # TODO
 
 method gen*(c: CsExpressionStatement): string =
+
+  echo "--> in  gen*(c: CsExpressionStatement)"
   echo "generating for expression statement"
+  echo "source is: " & c.src.strip()
+  assert not c.call.isNil
   result = c.call.gen() & "("
   if c.args.args.len > 0:
     result &= c.args.gen()
   result &= ")"
   if c.call.callName.contains(".") and c.call.callName.startsWith(re.re"[A-Z]"):
     result &= " # " & c.call.callName.rsplit(".",1)[0]
+  echo "expression statement generated result: " & result
 
 # ============= CsExternAliasDirective ========
 
 proc newCs*(t: typedesc[CsExternAliasDirective]; name: string): CsExternAliasDirective =
   new result
   result.typ = $typeof(t)
 #TODO(create:CsExternAliasDirective)
 
-proc extract*(t: typedesc[CsExternAliasDirective]; info: Info): CsExternAliasDirective = assert false
+proc extract*(t: typedesc[CsExternAliasDirective]; info: Info): CsExternAliasDirective =
+  echo info
+  let name = "" # info.essentials[0] # TODO!! cs environ got messed up after last extension update. after fixing, add name to info
+  result = newCs(t,name) # rare, it's a name for the dll when ns+class ambiguity occurs, should be in Namespace i think.
 
 method add*(parent: var CsExternAliasDirective; item: Dummy)  =
   echo "!!! ---->> unimplemented:  method add*(parent: var CsExternAliasDirective; item: Dummy) "
   if stopEarly: assert false
 
 # proc add*(parent: var CsExternAliasDirective; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsExternAliasDirective): string = assert false
+proc gen*(c: var CsExternAliasDirective): string =
+  assert false
+  echo "--> in  gen*(c: var CsExternAliasDirective)"
 # hmm, it's actually called a property.
 
 # ============= CsFinallyClause ========
@@ -1363,7 +1510,9 @@ method add*(parent: var CsFinallyClause; item: Dummy)  =
 
 # proc add*(parent: var CsFinallyClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsFinallyClause): string = assert false
+proc gen*(c: var CsFinallyClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsFinallyClause)"
 
 # ============= CsFixedStatement ========
 
@@ -1380,7 +1529,9 @@ method add*(parent: var CsFixedStatement; item: Dummy)  =
 
 # proc add*(parent: var CsFixedStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsFixedStatement): string = assert false
+proc gen*(c: var CsFixedStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsFixedStatement)"
 
 # ============= CsForEachStatement ========
 
@@ -1397,7 +1548,9 @@ method add*(parent: var CsForEachStatement; item: Dummy)  =
 
 # proc add*(parent: var CsForEachStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsForEachStatement): string = assert false
+proc gen*(c: var CsForEachStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsForEachStatement)"
 
 # ============= CsForEachVariableStatement ========
 
@@ -1414,7 +1567,9 @@ method add*(parent: var CsForEachVariableStatement; item: Dummy)  =
 
 # proc add*(parent: var CsForEachVariableStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsForEachVariableStatement): string = assert false
+proc gen*(c: var CsForEachVariableStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsForEachVariableStatement)"
 
 # ============= CsForStatement ========
 
@@ -1431,7 +1586,9 @@ method add*(parent: var CsForStatement; item: Dummy)  =
 
 # proc add*(parent: var CsForStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsForStatement): string = assert false
+proc gen*(c: var CsForStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsForStatement)"
 
 # ============= CsFromClause ========
 
@@ -1448,7 +1605,9 @@ method add*(parent: var CsFromClause; item: Dummy)  =
 
 # proc add*(parent: var CsFromClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsFromClause): string = assert false
+proc gen*(c: var CsFromClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsFromClause)"
 
 proc newCs*(t: typedesc[CsGenericName]): CsGenericName =
   new result
@@ -1465,7 +1624,9 @@ method add*(parent: var CsGenericName; item: Dummy)  =
 
 # proc add*(parent: var CsGenericName; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsGenericName): string = assert false
+proc gen*(c: var CsGenericName): string =
+  assert false
+  echo "--> in  gen*(c: var CsGenericName)"
 
 # ============= CsGlobalStatement ========
 
@@ -1482,7 +1643,9 @@ method add*(parent: var CsGlobalStatement; item: Dummy)  =
 
 # proc add*(parent: var CsGlobalStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsGlobalStatement): string = assert false
+proc gen*(c: var CsGlobalStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsGlobalStatement)"
 
 # ============= CsGotoStatement ========
 
@@ -1499,7 +1662,9 @@ method add*(parent: var CsGotoStatement; item: Dummy)  =
 
 # proc add*(parent: var CsGotoStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsGotoStatement): string = assert false
+proc gen*(c: var CsGotoStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsGotoStatement)"
 
 # ============= CsGroupClause ========
 
@@ -1516,7 +1681,9 @@ method add*(parent: var CsGroupClause; item: Dummy)  =
 
 # proc add*(parent: var CsGroupClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsGroupClause): string = assert false
+proc gen*(c: var CsGroupClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsGroupClause)"
 
 # ============= CsIfStatement ========
 
@@ -1533,7 +1700,9 @@ method add*(parent: var CsIfStatement; item: Dummy)  =
 
 # proc add*(parent: var CsIfStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsIfStatement): string = assert false
+proc gen*(c: var CsIfStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsIfStatement)"
 
 # ============= CsImplicitArrayCreationExpression ========
 
@@ -1550,7 +1719,9 @@ method add*(parent: var CsImplicitArrayCreationExpression; item: Dummy)  =
 
 # proc add*(parent: var CsImplicitArrayCreationExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsImplicitArrayCreationExpression): string = assert false
+proc gen*(c: var CsImplicitArrayCreationExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsImplicitArrayCreationExpression)"
 
 # ============= CsImplicitElementAccess ========
 
@@ -1567,7 +1738,9 @@ method add*(parent: var CsImplicitElementAccess; item: Dummy)  =
 
 # proc add*(parent: var CsImplicitElementAccess; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsImplicitElementAccess): string = assert false
+proc gen*(c: var CsImplicitElementAccess): string =
+  assert false
+  echo "--> in  gen*(c: var CsImplicitElementAccess)"
 
 # ============= CsIncompleteMember ========
 
@@ -1584,7 +1757,9 @@ method add*(parent: var CsIncompleteMember; item: Dummy)  =
 
 # proc add*(parent: var CsIncompleteMember; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsIncompleteMember): string = assert false
+proc gen*(c: var CsIncompleteMember): string =
+  assert false
+  echo "--> in  gen*(c: var CsIncompleteMember)"
 
 # ============= CsIndexer ========
 
@@ -1620,6 +1795,7 @@ method add*(parent: CsLiteralExpression; item: CsPrefixUnaryExpression) =
   parent.value = item.prefix & parent.value
 
 proc addBExpr(p: CsInitializerExpression; b:BodyExpr) =
+  echo "in addBExpr: " & b.typ
   if p.somePrefixOp.isNil:
     p.bexprs.add b
   else:
@@ -1653,12 +1829,15 @@ method add*(parent: var CsInitializerExpression; item: Dummy)  =
 # proc add*(parent: var CsInitializerExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
 proc gen*(c: var CsInitializerExpression): string =
+
+  echo "--> in  gen*(c: var CsInitializerExpression)"
   echo "gen CsInitializerExpression, got values:", c.valueReceived
   # result = ".initWith("
   result = ".initWith(@["
-  for i, b in c.bexprs:
-    if i > 0: result &= ", "
-    result &= b.gen()
+  var ls :seq[string]= @[]
+  for b in c.bexprs:
+    ls.add b.gen()
+  result &= ls.join(", ")
   # result &= ")"
   result &= "])"
   echo "gen result CsInitializerExpression" & result
@@ -1677,7 +1856,9 @@ method add*(parent: var CsInterface; item: CsProperty) =
 
 # proc add*(parent: var CsInterface; item: CsProperty; data: AllNeededData) = parent.add(item) # TODO
 
-proc gen*(c: var CsInterface): string = assert false
+proc gen*(c: var CsInterface): string =
+  assert false
+  echo "--> in  gen*(c: var CsInterface)"
 
 # ============= CsInterpolatedStringExpression ========
 
@@ -1694,7 +1875,9 @@ method add*(parent: var CsInterpolatedStringExpression; item: Dummy)  =
 
 # proc add*(parent: var CsInterpolatedStringExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsInterpolatedStringExpression): string = assert false
+proc gen*(c: var CsInterpolatedStringExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsInterpolatedStringExpression)"
 
 # ============= CsInterpolatedStringText ========
 
@@ -1711,7 +1894,9 @@ method add*(parent: var CsInterpolatedStringText; item: Dummy)  =
 
 # proc add*(parent: var CsInterpolatedStringText; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsInterpolatedStringText): string = assert false
+proc gen*(c: var CsInterpolatedStringText): string =
+  assert false
+  echo "--> in  gen*(c: var CsInterpolatedStringText)"
 
 # ============= CsInterpolationAlignmentClause ========
 
@@ -1728,7 +1913,9 @@ method add*(parent: var CsInterpolationAlignmentClause; item: Dummy)  =
 
 # proc add*(parent: var CsInterpolationAlignmentClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsInterpolationAlignmentClause): string = assert false
+proc gen*(c: var CsInterpolationAlignmentClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsInterpolationAlignmentClause)"
 
 # ============= CsInterpolationFormatClause ========
 
@@ -1745,7 +1932,9 @@ method add*(parent: var CsInterpolationFormatClause; item: Dummy)  =
 
 # proc add*(parent: var CsInterpolationFormatClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsInterpolationFormatClause): string = assert false
+proc gen*(c: var CsInterpolationFormatClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsInterpolationFormatClause)"
 
 # ============= CsInterpolation ========
 
@@ -1762,7 +1951,9 @@ method add*(parent: var CsInterpolation; item: Dummy)  =
 
 # proc add*(parent: var CsInterpolation; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsInterpolation): string = assert false
+proc gen*(c: var CsInterpolation): string =
+  assert false
+  echo "--> in  gen*(c: var CsInterpolation)"
 
 # ============= CsInvocationExpression ========
 
@@ -1784,6 +1975,8 @@ func normalizeCallName(s: string): string =
 
 method gen*(c: CsInvocationExpression): string =
 
+  echo "--> in  gen*(c: CsInvocationExpression)"
+
   result = if c.callName.contains(".") and c.callName.startsWith(re.re"[A-Z]"):
     normalizeCallName(c.callName)
   elif c.callName.startsWith(re.re"[A-Z]"):
@@ -1818,7 +2011,9 @@ method add*(parent: var CsIsPatternExpression; item: Dummy)  =
 
 # proc add*(parent: var CsIsPatternExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsIsPatternExpression): string = assert false
+proc gen*(c: var CsIsPatternExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsIsPatternExpression)"
 
 # ============= CsJoinClause ========
 
@@ -1835,7 +2030,9 @@ method add*(parent: var CsJoinClause; item: Dummy)  =
 
 # proc add*(parent: var CsJoinClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsJoinClause): string = assert false
+proc gen*(c: var CsJoinClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsJoinClause)"
 
 # ============= CsJoinIntoClause ========
 
@@ -1852,7 +2049,9 @@ method add*(parent: var CsJoinIntoClause; item: Dummy)  =
 
 # proc add*(parent: var CsJoinIntoClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsJoinIntoClause): string = assert false
+proc gen*(c: var CsJoinIntoClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsJoinIntoClause)"
 
 # ============= CsLabeledStatement ========
 
@@ -1869,7 +2068,9 @@ method add*(parent: var CsLabeledStatement; item: Dummy)  =
 
 # proc add*(parent: var CsLabeledStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsLabeledStatement): string = assert false
+proc gen*(c: var CsLabeledStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsLabeledStatement)"
 
 # ============= CsLetClause ========
 
@@ -1886,7 +2087,9 @@ method add*(parent: var CsLetClause; item: Dummy)  =
 
 # proc add*(parent: var CsLetClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsLetClause): string = assert false
+proc gen*(c: var CsLetClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsLetClause)"
 
 # ============= CsLiteralExpression ========
 
@@ -1909,6 +2112,8 @@ proc extract*(_: typedesc[CsLiteralExpression]; info: Info): CsLiteralExpression
   result = newCs(CsLiteralExpression, strVal)
 
 method gen*(lit: CsLiteralExpression): string =
+
+  echo "--> in  gen*(lit: CsLiteralExpression)"
   lit.value
 
 # ============= CsLocalDeclarationStatement ========
@@ -1930,7 +2135,9 @@ method add*(parent: var CsLocalFunctionStatement; item: Dummy)  =
 
 # proc add*(parent: var CsLocalFunctionStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsLocalFunctionStatement): string = assert false
+proc gen*(c: var CsLocalFunctionStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsLocalFunctionStatement)"
 
 proc newCs*(t: typedesc[CsAssignmentExpression]): CsAssignmentExpression =
   new result
@@ -1951,7 +2158,9 @@ method add*(parent: var CsLockStatement; item: Dummy)  =
 
 # proc add*(parent: var CsLockStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsLockStatement): string = assert false
+proc gen*(c: var CsLockStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsLockStatement)"
 
 # ============= CsMakeRefExpression ========
 
@@ -1968,7 +2177,9 @@ method add*(parent: var CsMakeRefExpression; item: Dummy)  =
 
 # proc add*(parent: var CsMakeRefExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsMakeRefExpression): string = assert false
+proc gen*(c: var CsMakeRefExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsMakeRefExpression)"
 
 # ============= CsMemberBindingExpression ========
 
@@ -1985,7 +2196,9 @@ method add*(parent: var CsMemberBindingExpression; item: Dummy)  =
 
 # proc add*(parent: var CsMemberBindingExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsMemberBindingExpression): string = assert false
+proc gen*(c: var CsMemberBindingExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsMemberBindingExpression)"
 
 proc newCs*(t: typedesc[CsMethod]; name: string): CsMethod =
   new result
@@ -2000,14 +2213,19 @@ method add*(parent: var CsMethod; p: CsParameterList) =
   parent.parameterList = p
 
 method gen*(item:CsObjectCreationExpression) : string =
+
+  echo "--> in  gen*(item:CsObjectCreationExpression) "
   result = "new" & item.name.replacementGenericTypes() &
     "(" &
     item.args.gen().replacementGenericTypes() &
     ")"
   if not item.initExpr.isNil:
     echo "trying to gen initExpr"
     result &= item.initExpr.gen()
 
+method add*(parent:var CsObjectCreationExpression; item:CsGenericName) =
+  parent.genericName=item
+
 method add*(parent:var CsObjectCreationExpression; item:CsInitializerExpression) =
   parent.initExpr = item
   # assert false
@@ -2032,6 +2250,10 @@ method add*(parent:CsAssignmentExpression; item: CsArgumentList) =
 method add*(parent:CsAssignmentExpression; item: CsObjectCreationExpression) =
   parent.right = item
 
+
+method add*(parent:CsGenericName; item:CsTypeArgumentList) =
+  parent.typearglist = item
+
 method gen*(c:CsVariableDeclarator):string =
   echo "rhs is: " & c.rhs.typ
   if c.ev != nil:
@@ -2062,24 +2284,34 @@ method add*(parent: var CsNameColon; item: Dummy)  =
 
 # proc add*(parent: var CsNameColon; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsNameColon): string = assert false
+proc gen*(c: var CsNameColon): string =
+  assert false
+  echo "--> in  gen*(c: var CsNameColon)"
 
 # ============= CsNameEquals ========
 
 proc newCs*(t: typedesc[CsNameEquals]; name: string): CsNameEquals =
   new result
   result.typ = $typeof(t)
-#TODO(create:CsNameEquals)
 
-proc extract*(t: typedesc[CsNameEquals]; info: Info): CsNameEquals = assert false
+proc extract*(t: typedesc[CsNameEquals]; info: Info): CsNameEquals =
+  var name = ""
+  if info.essentials.len > 0:
+    name = info.essentials[0] # TODO: add in csdisplay
+  result = newCs(CsNameEquals,name)
 
-method add*(parent: var CsNameEquals; item: Dummy)  =
-  echo "!!! ---->> unimplemented:  method add*(parent: var CsNameEquals; item: Dummy) "
-  if stopEarly: assert false
+
+method add*(parent: var CsNameEquals; item: CsGenericName)  =
+  parent.genericName = item
+
+method add*(parent: var CsParameter; item: CsGenericName)  =
+  parent.genericType = item
 
 # proc add*(parent: var CsNameEquals; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsNameEquals): string = assert false
+proc gen*(c: var CsNameEquals): string =
+  assert false
+  echo "--> in  gen*(c: var CsNameEquals)"
 
 # type Child* = object
 #   name: string
@@ -2173,9 +2405,13 @@ method add*(ns: var CsNamespace; use: CsUsingDirective) =
   ns.lastAddedTo = some(NamespaceParts.Using)
 
 proc gen*(c: CsUsingDirective): string =
+
+  echo "--> in  gen*(c: CsUsingDirective)"
   result = "import dotnet/" & c.name.toLowerAscii.replace(".", "/")
 
 proc gen*(r: CsNamespace): string =
+
+  echo "--> in  gen*(r: CsNamespace)"
   echo "generating namespace: " & r.name
   var s: seq[string] = @[]
   for u in r.imports:
@@ -2191,6 +2427,11 @@ proc gen*(r: CsNamespace): string =
 proc hash*(c: CsNamespace): Hash =
   result = hash(c.name)
 
+
+
+method add*(parent:var CsUsingDirective; item: CsNameEquals) =
+  parent.shorthand = item
+
 # ============= CsNullableType ========
 
 proc newCs*(t: typedesc[CsNullableType]; name: string): CsNullableType =
@@ -2206,7 +2447,9 @@ method add*(parent: var CsNullableType; item: Dummy)  =
 
 # proc add*(parent: var CsNullableType; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsNullableType): string = assert false
+proc gen*(c: var CsNullableType): string =
+  assert false
+  echo "--> in  gen*(c: var CsNullableType)"
 
 # ============= CsObjectCreationExpression ========
 
@@ -2244,7 +2487,9 @@ method add*(parent: var CsOmittedArraySizeExpression; item: Dummy)  =
 
 # proc add*(parent: var CsOmittedArraySizeExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsOmittedArraySizeExpression): string = assert false
+proc gen*(c: var CsOmittedArraySizeExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsOmittedArraySizeExpression)"
 
 # ============= CsOmittedTypeArgument ========
 
@@ -2261,7 +2506,9 @@ method add*(parent: var CsOmittedTypeArgument; item: Dummy)  =
 
 # proc add*(parent: var CsOmittedTypeArgument; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsOmittedTypeArgument): string = assert false
+proc gen*(c: var CsOmittedTypeArgument): string =
+  assert false
+  echo "--> in  gen*(c: var CsOmittedTypeArgument)"
 
 # ============= CsOperator ========
 
@@ -2278,7 +2525,9 @@ method add*(parent: var CsOperator; item: Dummy)  =
 
 # proc add*(parent: var CsOperator; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsOperator): string = assert false
+proc gen*(c: var CsOperator): string =
+  assert false
+  echo "--> in  gen*(c: var CsOperator)"
 
 # ============= CsOrderByClause ========
 
@@ -2295,7 +2544,9 @@ method add*(parent: var CsOrderByClause; item: Dummy)  =
 
 # proc add*(parent: var CsOrderByClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsOrderByClause): string = assert false
+proc gen*(c: var CsOrderByClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsOrderByClause)"
 
 # ============= CsOrdering ========
 
@@ -2312,7 +2563,9 @@ method add*(parent: var CsOrdering; item: Dummy)  =
 
 # proc add*(parent: var CsOrdering; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsOrdering): string = assert false
+proc gen*(c: var CsOrdering): string =
+  assert false
+  echo "--> in  gen*(c: var CsOrdering)"
 
 # ============ CsParameterList =================
 
@@ -2353,7 +2606,9 @@ method add*(parent: var CsParenthesizedExpression; item: Dummy)  =
 
 # proc add*(parent: var CsParenthesizedExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsParenthesizedExpression): string = assert false
+proc gen*(c: var CsParenthesizedExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsParenthesizedExpression)"
 
 # ============= CsParenthesizedLambdaExpression ========
 
@@ -2370,7 +2625,9 @@ method add*(parent: var CsParenthesizedLambdaExpression; item: Dummy)  =
 
 # proc add*(parent: var CsParenthesizedLambdaExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsParenthesizedLambdaExpression): string = assert false
+proc gen*(c: var CsParenthesizedLambdaExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsParenthesizedLambdaExpression)"
 
 # ============= CsParenthesizedVariableDesignation ========
 
@@ -2387,7 +2644,9 @@ method add*(parent: var CsParenthesizedVariableDesignation; item: Dummy)  =
 
 # proc add*(parent: var CsParenthesizedVariableDesignation; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsParenthesizedVariableDesignation): string = assert false
+proc gen*(c: var CsParenthesizedVariableDesignation): string =
+  assert false
+  echo "--> in  gen*(c: var CsParenthesizedVariableDesignation)"
 
 # ============= CsPointerType ========
 
@@ -2404,7 +2663,9 @@ method add*(parent: var CsPointerType; item: Dummy)  =
 
 # proc add*(parent: var CsPointerType; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsPointerType): string = assert false
+proc gen*(c: var CsPointerType): string =
+  assert false
+  echo "--> in  gen*(c: var CsPointerType)"
 
 # ============= CsPostfixUnaryExpression ========
 
@@ -2421,7 +2682,9 @@ method add*(parent: var CsPostfixUnaryExpression; item: Dummy)  =
 
 # proc add*(parent: var CsPostfixUnaryExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsPostfixUnaryExpression): string = assert false
+proc gen*(c: var CsPostfixUnaryExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsPostfixUnaryExpression)"
 
 # ============= CsPredefinedType ========
 
@@ -2437,7 +2700,9 @@ proc extract*(t: typedesc[CsPredefinedType]; info: Info; data: AllNeededData): C
   else: name = ""
   result = newCs(CsPredefinedType, name)
 
-proc gen*(c: var CsPredefinedType): string = assert false
+proc gen*(c: var CsPredefinedType): string =
+  assert false
+  echo "--> in  gen*(c: var CsPredefinedType)"
 
 # ============= CsPrefixUnaryExpression ========
 
@@ -2457,7 +2722,9 @@ method add*(parent: var CsPrefixUnaryExpression; item: Dummy)  =
 
 # proc add*(parent: var CsPrefixUnaryExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsPrefixUnaryExpression): string = assert false
+proc gen*(c: var CsPrefixUnaryExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsPrefixUnaryExpression)"
 
 proc newCs*(t: typedesc[CsProperty]; name: string): CsProperty =
   new result
@@ -2498,7 +2765,9 @@ method add*(parent: var CsQueryBody; item: Dummy)  =
 
 # proc add*(parent: var CsQueryBody; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsQueryBody): string = assert false
+proc gen*(c: var CsQueryBody): string =
+  assert false
+  echo "--> in  gen*(c: var CsQueryBody)"
 
 # ============= CsQueryContinuation ========
 
@@ -2515,7 +2784,9 @@ method add*(parent: var CsQueryContinuation; item: Dummy)  =
 
 # proc add*(parent: var CsQueryContinuation; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsQueryContinuation): string = assert false
+proc gen*(c: var CsQueryContinuation): string =
+  assert false
+  echo "--> in  gen*(c: var CsQueryContinuation)"
 
 # ============= CsQueryExpression ========
 
@@ -2532,7 +2803,9 @@ method add*(parent: var CsQueryExpression; item: Dummy)  =
 
 # proc add*(parent: var CsQueryExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsQueryExpression): string = assert false
+proc gen*(c: var CsQueryExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsQueryExpression)"
 
 # ============= CsRefExpression ========
 
@@ -2549,7 +2822,9 @@ method add*(parent: var CsRefExpression; item: Dummy)  =
 
 # proc add*(parent: var CsRefExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsRefExpression): string = assert false
+proc gen*(c: var CsRefExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsRefExpression)"
 
 # ============= CsRefTypeExpression ========
 
@@ -2566,7 +2841,9 @@ method add*(parent: var CsRefTypeExpression; item: Dummy)  =
 
 # proc add*(parent: var CsRefTypeExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsRefTypeExpression): string = assert false
+proc gen*(c: var CsRefTypeExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsRefTypeExpression)"
 
 # ============= CsRefType ========
 
@@ -2583,7 +2860,9 @@ method add*(parent: var CsRefType; item: Dummy)  =
 
 # proc add*(parent: var CsRefType; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsRefType): string = assert false
+proc gen*(c: var CsRefType): string =
+  assert false
+  echo "--> in  gen*(c: var CsRefType)"
 
 # ============= CsRefValueExpression ========
 
@@ -2600,7 +2879,9 @@ method add*(parent: var CsRefValueExpression; item: Dummy)  =
 
 # proc add*(parent: var CsRefValueExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsRefValueExpression): string = assert false
+proc gen*(c: var CsRefValueExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsRefValueExpression)"
 
 # ============= CsReturnStatement ========
 
@@ -2628,6 +2909,8 @@ method add*(parent: var CsReturnStatement; item: BodyExpr) =
   parent.expr = item; parent.isComplete = true
 
 method gen*(c: CsReturnStatement): string =
+
+  echo "--> in  gen*(c: CsReturnStatement)"
   echo "generating CsReturnStatement:"
   if not c.expr.isNil:
     echo "!!!!!!", c.expr.typ , " " , c.expr.ttype
@@ -2657,7 +2940,9 @@ method add*(parent: var CsSelectClause; item: Dummy)  =
 
 # proc add*(parent: var CsSelectClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsSelectClause): string = assert false
+proc gen*(c: var CsSelectClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsSelectClause)"
 
 proc newCs*(t: typedesc[CsSimpleBaseType]): CsSimpleBaseType =
   new result
@@ -2673,7 +2958,9 @@ method add*(parent: var CsSimpleBaseType; item: Dummy)  =
 
 # proc add*(parent: var CsSimpleBaseType; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsSimpleBaseType): string = assert false
+proc gen*(c: var CsSimpleBaseType): string =
+  assert false
+  echo "--> in  gen*(c: var CsSimpleBaseType)"
 
 # ============= CsSimpleLambdaExpression ========
 
@@ -2690,7 +2977,9 @@ method add*(parent: var CsSimpleLambdaExpression; item: Dummy)  =
 
 # proc add*(parent: var CsSimpleLambdaExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsSimpleLambdaExpression): string = assert false
+proc gen*(c: var CsSimpleLambdaExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsSimpleLambdaExpression)"
 
 # ============= CsSingleVariableDesignation ========
 
@@ -2707,7 +2996,9 @@ method add*(parent: var CsSingleVariableDesignation; item: Dummy)  =
 
 # proc add*(parent: var CsSingleVariableDesignation; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsSingleVariableDesignation): string = assert false
+proc gen*(c: var CsSingleVariableDesignation): string =
+  assert false
+  echo "--> in  gen*(c: var CsSingleVariableDesignation)"
 
 # ============= CsSizeOfExpression ========
 
@@ -2724,7 +3015,9 @@ method add*(parent: var CsSizeOfExpression; item: Dummy)  =
 
 # proc add*(parent: var CsSizeOfExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsSizeOfExpression): string = assert false
+proc gen*(c: var CsSizeOfExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsSizeOfExpression)"
 
 # ============= CsStackAllocArrayCreationExpression ========
 
@@ -2741,7 +3034,9 @@ method add*(parent: var CsStackAllocArrayCreationExpression; item: Dummy)  =
 
 # proc add*(parent: var CsStackAllocArrayCreationExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsStackAllocArrayCreationExpression): string = assert false
+proc gen*(c: var CsStackAllocArrayCreationExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsStackAllocArrayCreationExpression)"
 
 # ============= CsStruct ========
 
@@ -2758,7 +3053,9 @@ method add*(parent: var CsStruct; item: Dummy)  =
 
 # proc add*(parent: var CsStruct; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsStruct): string = assert false
+proc gen*(c: var CsStruct): string =
+  assert false
+  echo "--> in  gen*(c: var CsStruct)"
 
 # ============= CsSwitchSection ========
 
@@ -2775,7 +3072,9 @@ method add*(parent: var CsSwitchSection; item: Dummy)  =
 
 # proc add*(parent: var CsSwitchSection; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsSwitchSection): string = assert false
+proc gen*(c: var CsSwitchSection): string =
+  assert false
+  echo "--> in  gen*(c: var CsSwitchSection)"
 
 # ============= CsSwitchStatement ========
 
@@ -2792,7 +3091,9 @@ method add*(parent: var CsSwitchStatement; item: Dummy)  =
 
 # proc add*(parent: var CsSwitchStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsSwitchStatement): string = assert false
+proc gen*(c: var CsSwitchStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsSwitchStatement)"
 
 proc newCs*(t: typedesc[CsThisExpression]; name: string): CsThisExpression =
   new result
@@ -2807,7 +3108,9 @@ method add*(parent: var CsThisExpression; item: Dummy)  =
 
 # proc add*(parent: var CsThisExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsThisExpression): string = assert false
+proc gen*(c: var CsThisExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsThisExpression)"
 
 # ============= CsThrowExpression ========
 
@@ -2824,7 +3127,9 @@ method add*(parent: var CsThrowExpression; item: Dummy)  =
 
 # proc add*(parent: var CsThrowExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsThrowExpression): string = assert false
+proc gen*(c: var CsThrowExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsThrowExpression)"
 
 # ============= CsThrowStatement ========
 
@@ -2841,7 +3146,9 @@ method add*(parent: var CsThrowStatement; item: Dummy)  =
 
 # proc add*(parent: var CsThrowStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsThrowStatement): string = assert false
+proc gen*(c: var CsThrowStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsThrowStatement)"
 
 # ============= CsTryStatement ========
 
@@ -2858,7 +3165,9 @@ method add*(parent: var CsTryStatement; item: Dummy)  =
 
 # proc add*(parent: var CsTryStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsTryStatement): string = assert false
+proc gen*(c: var CsTryStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsTryStatement)"
 
 # ============= CsTupleElement ========
 
@@ -2875,7 +3184,9 @@ method add*(parent: var CsTupleElement; item: Dummy)  =
 
 # proc add*(parent: var CsTupleElement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsTupleElement): string = assert false
+proc gen*(c: var CsTupleElement): string =
+  assert false
+  echo "--> in  gen*(c: var CsTupleElement)"
 
 # ============= CsTupleExpression ========
 
@@ -2892,7 +3203,9 @@ method add*(parent: var CsTupleExpression; item: Dummy)  =
 
 # proc add*(parent: var CsTupleExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsTupleExpression): string = assert false
+proc gen*(c: var CsTupleExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsTupleExpression)"
 
 # ============= CsTupleType ========
 
@@ -2909,7 +3222,9 @@ method add*(parent: var CsTupleType; item: Dummy)  =
 
 # proc add*(parent: var CsTupleType; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsTupleType): string = assert false
+proc gen*(c: var CsTupleType): string =
+  assert false
+  echo "--> in  gen*(c: var CsTupleType)"
 
 # ============= CsTypeArgumentList ========
 
@@ -2927,7 +3242,9 @@ method add*(parent: var CsTypeArgumentList; item: Dummy)  =
 
 # proc add*(parent: var CsTypeArgumentList; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsTypeArgumentList): string = assert false
+proc gen*(c: var CsTypeArgumentList): string =
+  assert false
+  echo "--> in  gen*(c: var CsTypeArgumentList)"
 
 # ============= CsTypeConstraint ========
 
@@ -2944,7 +3261,9 @@ method add*(parent: var CsTypeConstraint; item: Dummy)  =
 
 # proc add*(parent: var CsTypeConstraint; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsTypeConstraint): string = assert false
+proc gen*(c: var CsTypeConstraint): string =
+  assert false
+  echo "--> in  gen*(c: var CsTypeConstraint)"
 
 proc newCs*(t: typedesc[CsTypeOfExpression]; name: string): CsTypeOfExpression =
   new result
@@ -2959,7 +3278,9 @@ method add*(parent: var CsTypeOfExpression; item: Dummy)  =
 
 # proc add*(parent: var CsTypeOfExpression; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsTypeOfExpression): string = assert false
+proc gen*(c: var CsTypeOfExpression): string =
+  assert false
+  echo "--> in  gen*(c: var CsTypeOfExpression)"
 
 # ============= CsTypeParameterConstraintClause ========
 
@@ -2976,7 +3297,9 @@ method add*(parent: var CsTypeParameterConstraintClause; item: Dummy)  =
 
 # proc add*(parent: var CsTypeParameterConstraintClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsTypeParameterConstraintClause): string = assert false
+proc gen*(c: var CsTypeParameterConstraintClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsTypeParameterConstraintClause)"
 
 # ============= CsTypeParameterList ========
 
@@ -2993,7 +3316,9 @@ method add*(parent: var CsTypeParameterList; item: Dummy)  =
 
 # proc add*(parent: var CsTypeParameterList; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsTypeParameterList): string = assert false
+proc gen*(c: var CsTypeParameterList): string =
+  assert false
+  echo "--> in  gen*(c: var CsTypeParameterList)"
 
 # ============= CsTypeParameter ========
 
@@ -3010,7 +3335,9 @@ method add*(parent: var CsTypeParameter; item: Dummy)  =
 
 # proc add*(parent: var CsTypeParameter; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsTypeParameter): string = assert false
+proc gen*(c: var CsTypeParameter): string =
+  assert false
+  echo "--> in  gen*(c: var CsTypeParameter)"
 
 # ============= CsUnsafeStatement ========
 
@@ -3027,7 +3354,9 @@ method add*(parent: var CsUnsafeStatement; item: Dummy)  =
 
 # proc add*(parent: var CsUnsafeStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsUnsafeStatement): string = assert false
+proc gen*(c: var CsUnsafeStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsUnsafeStatement)"
 
 # ============= CsUsingDirective ========
 
@@ -3061,7 +3390,9 @@ method add*(parent: var CsUsingStatement; item: Dummy)  =
 
 # proc add*(parent: var CsUsingStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsUsingStatement): string = assert false
+proc gen*(c: var CsUsingStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsUsingStatement)"
 
 # ============= CsWhenClause ========
 
@@ -3078,7 +3409,9 @@ method add*(parent: var CsWhenClause; item: Dummy)  =
 
 # proc add*(parent: var CsWhenClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsWhenClause): string = assert false
+proc gen*(c: var CsWhenClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsWhenClause)"
 
 # ============= CsWhereClause ========
 
@@ -3095,7 +3428,9 @@ method add*(parent: var CsWhereClause; item: Dummy)  =
 
 # proc add*(parent: var CsWhereClause; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsWhereClause): string = assert false
+proc gen*(c: var CsWhereClause): string =
+  assert false
+  echo "--> in  gen*(c: var CsWhereClause)"
 
 # ============= CsWhileStatement ========
 
@@ -3112,7 +3447,9 @@ method add*(parent: var CsWhileStatement; item: Dummy)  =
 
 # proc add*(parent: var CsWhileStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsWhileStatement): string = assert false
+proc gen*(c: var CsWhileStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsWhileStatement)"
 
 # ============= CsYieldStatement ========
 
@@ -3129,7 +3466,9 @@ method add*(parent: var CsYieldStatement; item: Dummy)  =
 
 # proc add*(parent: var CsYieldStatement; item: Dummy; data: AllNeededData) = parent.add(item)
 
-proc gen*(c: var CsYieldStatement): string = assert false
+proc gen*(c: var CsYieldStatement): string =
+  assert false
+  echo "--> in  gen*(c: var CsYieldStatement)"
 
 # ======================================================
 
@@ -3150,19 +3489,28 @@ proc newCs*(t: typedesc[CsLocalDeclarationStatement]): CsLocalDeclarationStateme
   new result
   result.typ = $typeof(t)
   result.ttype = "CsLocalDeclarationStatement"
+
 proc extract*(t: typedesc[CsLocalDeclarationStatement]; info: Info; data:AllNeededData): CsLocalDeclarationStatement =
   result = newCs(CsLocalDeclarationStatement)
   result.vartype = info.essentials[1]
   result.names = info.essentials[0].split(",").mapIt(it.strip)
 
+method add*(parent:var CsVariable,item: CsGenericName) =
+  parent.genericName = item
+
+
 method gen*(c:  CsLocalDeclarationStatement): string =
+
+  echo "--> in  gen*(c:  CsLocalDeclarationStatement)"
   # echo "first gen attempt!!!", c.names.join(", ") & " : " & c.vartype
   # result = "var " & $c.names.join(", ")
   # if c.vartype != "var":
   #   result &= " : " & c.vartype
   echo "START OF gen CsLocalDeclarationStatement:"
+  echo "left hand side"
   result &= c.lhs.gen()
   echo "gen result so far: " & result
+  echo "right hand side"
   result &= c.rhs.gen()
   echo "gen result so far: " & result
   echo "END OF gen CsLocalDeclarationStatement."
@@ -3178,6 +3526,8 @@ method add*(parent: var CsLocalDeclarationStatement; item: CsGenericName) =
 
 method add*(parent: var CsLocalDeclarationStatement; item: CsTypeArgumentList) =
   parent.lhs.genericName.typearglist = item
+  # TODO: can also be the rhs. so we should forward to last construct that fits instead of a high parent.
+
 method add*(parent: var CsLocalDeclarationStatement; item: CsVariableDeclarator) =
   parent.rhs = item
 
diff --git a/constructs/justtypes.nim b/constructs/justtypes.nim
index 97690be..39506f1 100644
--- a/constructs/justtypes.nim
+++ b/constructs/justtypes.nim
@@ -24,7 +24,7 @@ type CsAccessorList* = ref object of CsObject
   setPart*:CsAccessor
 type CsAliasQualifiedName* = ref object of CsObject #TODO(type:CsAliasQualifiedName)
 type CsField* = ref object of CsObject
-  ttype*: string
+  thetype*: string
   isPublic*: bool
   isStatic*:bool
 type CsAnonymousMethodExpression* = ref object of CsObject #TODO(type:CsAnonymousMethodExpression)
@@ -76,8 +76,15 @@ type CsProperty* = ref object of CsObject
   acclist*:CsAccessorList
   bodySet*: seq[BodyExpr] # dunno. TODO: this should be strongly connected to acclist (maybe extracted from it?). but lastBodyExpr wants to have constructs readily available like in this seq.
   bodyGet*: seq[BodyExpr] # NOTE: don't know yet what type to* put here. maybe something like a method body or a list of expr ?
+
+type CsTypeArgumentList* = ref object of CsObject #TODO(type:CsTypeArgumentList)
+  types*:seq[string]
+type CsGenericName* = ref object of CsObject
+  typearglist*:CsTypeArgumentList
+
 type CsParameter* = ref object of CsObject
   ptype*: string
+  genericType*:CsGenericName
   isRef*: bool
   isOut*: bool
 type CsParameterList* = ref object of CsObject
@@ -90,7 +97,9 @@ type CsMethod* = ref object of CsObject
   # TODO: method body can change to Construct, but limited only to the constructs applicable. (type constraints* with distinct or runtime asserts)
   # TODO: or we check with case ttype string, as before. runtime dispatch etc.
   body*: seq[BodyExpr]            # use here inheritance and methods (runtime dispatch). # seq[Expr] expressions, and each should know how to generate their line. ref objects, and methods.
+
 type CsConstructorInitializer* = ref object of CsObject #TODO(type:CsConstructorInitializer)
+
 type CsConstructor* = ref object of CsObject
   parentClass*: string
   parameterList*: CsParameterList # seq[CsParameter]
@@ -115,17 +124,15 @@ type CsClass* = ref object of CsObject
   nsParent*: string
   extends*: string
   implements*: seq[string]
-  # fields*: seq[CsField]
+  fields*: seq[CsField]
   properties*: seq[CsProperty]
   methods*: seq[CsMethod]
   ctors*: seq[CsConstructor]
-  # enums*: seq[CsEnum]
-  # enumTable*: TableRef[string, CsEnum]
   lastAddedTo*: Option[ClassParts]
   isStatic*: bool
   mods*: HashSet[string]
   indexer*: CsIndexer
-  # hasIndexer*: bool
+
 type CsClassOrStructConstraint* = ref object of CsObject #TODO(type:CsClassOrStructConstraint)
 type CsConditionalAccessExpression* = ref object of CsObject #TODO(type:CsConditionalAccessExpression)
 type CsConditionalExpression* = ref object of CsObject #TODO(type:CsConditionalExpression)
@@ -163,11 +170,9 @@ type CsForEachStatement* = ref object of CsObject #TODO(type:CsForEachStatement)
 type CsForEachVariableStatement* = ref object of CsObject #TODO(type:CsForEachVariableStatement)
 type CsForStatement* = ref object of CsObject #TODO(type:CsForStatement)
 type CsFromClause* = ref object of CsObject #TODO(type:CsFromClause)
-type CsTypeArgumentList* = ref object of CsObject #TODO(type:CsTypeArgumentList)
-  types*:seq[string]
 
-type CsGenericName* = ref object of CsObject
-  typearglist*:CsTypeArgumentList
+
+
 type CsGlobalStatement* = ref object of CsObject #TODO(type:CsGlobalStatement)
 type CsGotoStatement* = ref object of CsObject #TODO(type:CsGotoStatement)
 type CsGroupClause* = ref object of CsObject #TODO(type:CsGroupClause)
@@ -200,10 +205,13 @@ type CsLocalFunctionStatement* = ref object of CsObject #TODO(type:CsLocalFuncti
 type CsLockStatement* = ref object of CsObject #TODO(type:CsLockStatement)
 type CsMakeRefExpression* = ref object of CsObject #TODO(type:CsMakeRefExpression)
 type CsMemberBindingExpression* = ref object of CsObject #TODO(type:CsMemberBindingExpression)
+
 type CsObjectCreationExpression* = ref object of IAssignable
   typeName*: string # args*: CsParameterList
+  genericName*:CsGenericName # replaces typeName perhaps.
   args*: CsArgumentList
   initExpr*:CsInitializerExpression
+
 type CsVariableDeclarator* = ref object of BodyExpr # I assume this is the right hand side, what the variable is stored with.
   ev*:CsEqualsValueClause # so i can get (with its parentid) the expression statement which is the right hand side, afterwards.
   rhs*:IAssignable
@@ -217,7 +225,9 @@ type CsReturnStatement* = ref object of BodyExpr # type:CsReturnStatement
   value*:string
 type CsNameColon* = ref object of CsObject #TODO(type:CsNameColon)
 type CsNameEquals* = ref object of CsObject #TODO(type:CsNameEquals)
+  genericName*:CsGenericName
 type CsUsingDirective* = ref object of CsObject
+  shorthand*:CsNameEquals
 type CsNamespace* = ref object of CsObject
   # id*: UUID
   parent*: string
@@ -313,6 +323,7 @@ type CsLocalDeclarationStatement* = ref object of BodyExpr
   rhs*:CsVariableDeclarator  # which has what's after the equals-value-clause.
 
 
+
 type CsBinaryPattern* = ref object of CsObject
 type CsDiscardPattern* = ref object of CsObject
 type CsFunctionPointerType* = ref object of CsObject
diff --git a/ideal.nim b/ideal.nim
index 20015e9..f8a7c76 100644
--- a/ideal.nim
+++ b/ideal.nim
@@ -17,14 +17,6 @@ import uuids, options,sequtils
 
 # proc pathOfBlocks(): seq[B] = discard # TODO
 
-# proc processTreeForData(root: var CsRoot; info: Info): AllNeededData =
-#   # make heavy use of the Construct variant kind, to build the needed Data.
-#   var lastBlock: Option[Construct]
-#   # lastItem
-#   let path = pathOfBlocks()
-#   if path.len > 0:
-#     lastBlock = root.fetch(path[^1].id) # TODO......
-
 # TODO: a sprawling giant. how to refactor? is it even possible to refactor this?
 proc add*(parent, child: Construct; data: AllNeededData) =
   echo "in add <Construct>"
@@ -264,6 +256,10 @@ proc add*(parent, child: Construct; data: AllNeededData) =
     of ckInitializerExpression:
       var c = child.initializerExpression
       c.parentId = p.id; p.add c
+    of ckGenericName:
+      var c = child.genericName
+      c.parentId = p.id; p.add c
+
     else: assert false, "plz impl for child: " & $child.kind
 
   of ckInitializerExpression:
@@ -285,6 +281,43 @@ proc add*(parent, child: Construct; data: AllNeededData) =
       c.parentId = p.id;  p.add c
 
     else: assert false, "plz impl for child: " & $child.kind
+  of ckVariable:
+    var p = parent.variable
+    case child.kind
+    of ckGenericName:
+      var c = child.genericName
+      c.parentId = p.id;  p.add c
+    else: assert false, "plz impl for child: " & $child.kind
+  of ckGenericName:
+    var p = parent.genericName
+    case child.kind
+    of ckTypeArgumentList:
+      var c = child.typeArgumentList
+      c.parentId = p.id;  p.add c
+    else: assert false, "plz impl for child: " & $child.kind
+
+  of ckUsingDirective:
+    var p = parent.usingDirective
+    case child.kind
+    of ckNameEquals:
+      var c = child.nameEquals
+      c.parentId = p.id;  p.add c
+    else: assert false, "plz impl for child: " & $child.kind
+  of ckNameEquals:
+    var p = parent.nameEquals
+    case child.kind
+    of ckGenericName:
+      var c = child.genericName
+      c.parentId = p.id;  p.add c
+    else: assert false, "plz impl for child: " & $child.kind
+
+  of ckParameter:
+    var p = parent.parameter
+    case child.kind
+    of ckGenericName:
+      var c = child.genericName
+      c.parentId = p.id;  p.add c
+    else: assert false, "plz impl for child: " & $child.kind
 
   else: assert false, "plz impl for parent: " & $parent.kind
 
@@ -335,6 +368,7 @@ proc addToRoot2*(root: var CsRoot; src: string; info: Info; id: UUID; upcoming:s
     var obj: Construct = createType(info, id, allData)
     if obj.isNil: return
     obj.id = some(id)
+
     # allData.refresh(root,info,src)
     if obj.sameAsExisting(allData): return # for example, don't add a new namespace but fetch it based on name.
     root.register(id, obj)
diff --git a/parent_finder.nim b/parent_finder.nim
index 475686e..44f4708 100644
--- a/parent_finder.nim
+++ b/parent_finder.nim
@@ -1,12 +1,13 @@
 # parent_finder.nim
-import options, sequtils, all_needed_data, block_utils
+import options, sequtils, all_needed_data, block_utils#, strutils
 import info_center
 import types, construct, constructs/[cs_all_constructs, justtypes]
 import constructs/cs_root, uuids
 
 proc cfits*(parent, item: Construct; data: AllNeededData): bool = # asks the inner types to implement fits for these type arguments.
   result = case $parent.kind & ", " & $item.kind
   of "ckNamespace, ckClass": true
+  of "ckClass, ckField": true
   of "ckNamespace, ckEnum": true
   of "ckEnum, ckEnumMember": true
   of "ckClass, ckMethod": true
@@ -62,6 +63,12 @@ proc cfits*(parent, item: Construct; data: AllNeededData): bool = # asks the inn
   of "ckLiteralExpression, ckPrefixUnaryExpression": true
   of "ckInitializerExpression, ckPrefixUnaryExpression": true
   of "ckVariableDeclarator, ckBinaryExpression": true
+  of "ckVariable, ckGenericName": true
+  of "ckObjectCreationExpression, ckGenericName": true
+  of "ckGenericName, ckTypeArgumentList": true
+  of "ckUsingDirective, ckNameEquals": true
+  of "ckNameEquals, ckGenericName": true
+  of "ckParameter, ckGenericName": true
   else: raise newException(Exception, "cfits is missing:  of \"" & $parent.kind & ", " & $item.kind & "\": true")
 import state,sugar
 proc  handleLiteralExpression(data:AllNeededData) : Option[UUID] =
@@ -246,12 +253,14 @@ proc determineParentId(obj: Construct; data: AllNeededData): (bool,Option[UUID])
     res = data.idLastNsPart()
 
   of ckInvocationExpression:
-    echo "obj is InvocationExpression"
+    echo "obj is InvocationExpression" #TODO: can also be in class as initializing instance var.
     # res = data.lastMethod.id
-    if data.lastMethod.body.len == 0:
-      res = data.lastMethod.id
-    else:
-      res = data.lastMethod.lastBodyExprId
+    if data.classLastAdded == Methods:
+      if data.lastMethod.body.len == 0:
+        res = data.lastMethod.id
+      else:
+        res = data.lastMethod.lastBodyExprId
+    else: res = data.idLastClassPart
 
   of ckArgument:
     echo "obj is Argument, older code was discarding -- TODO?"
@@ -320,18 +329,30 @@ proc determineParentId(obj: Construct; data: AllNeededData): (bool,Option[UUID])
 
 
   of ckGenericName: # NOTE:don't know how it should be structured. probably part of csvariable.
-    case data.previousConstruct.get.name
-    of ["VariableDeclaration", "ObjectCreationExpression"]:
-      assert data.classLastAdded == Methods, $data.classLastAdded
-      res = data.lastBodyExprId
-    else: assert false, data.previousConstruct.get.name
+    # just return the last construct.
+    let b = state.getLastBlock((c) => c.name notin [ "GenericName", "IdentifierName","QualifiedName"] )
+    echo b.get.name
+    res = b.get.id.some
+    when false: # previous impl. do we pass unit tests?
+      case data.previousConstruct.get.name
+      of [ "IdentifierName"]: discarded = true
+      of ["VariableDeclaration", "ObjectCreationExpression","MethodDeclaration","Parameter","SimpleBaseType"]:
+        assert data.classLastAdded == Methods, $data.classLastAdded
+        res = data.lastBodyExprId
+        if res.get != data.previousConstruct.get.id:
+          let btype = if not data.lastBodyExpr.get.typ.isEmptyOrWhitespace: data.lastBodyExpr.get.typ else: data.lastBodyExpr.get.ttype
+          echo btype, " <=> " , data.previousConstruct.get.name
+      else: assert false, data.previousConstruct.get.name
 
 
   of ckTypeArgumentList:
     case data.previousConstruct.get.name
     of "GenericName":
-      assert data.classLastAdded == Methods, $data.classLastAdded
-      res = data.lastBodyExprId
+      let b = data.lastBlockType("GenericName")
+      assert b.isSome
+      res = b
+      # assert data.classLastAdded == Methods, $data.classLastAdded
+      # res = data.lastBodyExprId
     else: assert false, data.previousConstruct.get.name
 
   of ckVariableDeclarator: # for now assume we're in method, add more later.
@@ -360,11 +381,12 @@ proc determineParentId(obj: Construct; data: AllNeededData): (bool,Option[UUID])
 
   of ckPrefixUnaryExpression: # hmm, not the previous but the next one. so just add it.
     let fitting = state.getLastBlock(c=>c.name in ["InitializerExpression"]) # TODO: add others as needed.
-    assert fitting.isSome
+    assert fitting.isSome, $data.simplified
     res = fitting.get.id.some
   of ckBinaryExpression:
-    res = data.lastBlockType("VariableDeclarator")
-    assert res.isSome
+    let b  = state.getLastBlock(c=>c.name in ["VariableDeclarator"]) # TODO: add others as needed.
+    assert b.isSome, $data.simplified
+    res = b.get.id.some
   of ckField: # classes, or interfaces
     assert data.nsLastAdded in [ Classes, Interfaces ] # more?
     res = data.idLastNsPart
@@ -389,7 +411,8 @@ proc determineParentId(obj: Construct; data: AllNeededData): (bool,Option[UUID])
   of ckOmittedArraySizeExpression:
     assert false, $obj.kind & " is still unsupported"
   of ckNameEquals:
-    assert false, $obj.kind & " is still unsupported"
+    res = data.lastUsing.id
+    # assert false, $obj.kind & " is still unsupported"
   of ckThrowStatement:
     assert false, $obj.kind & " is still unsupported"
   of ckTypeOfExpression:
@@ -581,7 +604,9 @@ proc determineParentId(obj: Construct; data: AllNeededData): (bool,Option[UUID])
   of ckQueryContinuation:
     assert false, $obj.kind & " is still unsupported"
   of ckExternAliasDirective:
-    assert false, $obj.kind & " is still unsupported"
+    # ignore, unsupported.
+    discarded = true
+    echo "got " & $obj.kind & " which we don't support (doesn't make sense for nim modules)"
   of ckMakeRefExpression:
     assert false, $obj.kind & " is still unsupported"
   of ckRefValueExpression:
@@ -632,17 +657,24 @@ proc determineParentId(obj: Construct; data: AllNeededData): (bool,Option[UUID])
     assert false, $obj.kind & " is still unsupported"
     # raise notimplementedException
   result = (discarded,res)
+  if res.isNone: assert discarded == true
+  assert (not discarded and res.isSome) or (discarded and res.isNone), "dis: " & $discarded & ", res: " & $res
 
 proc getParent*(root: var CsRoot; newobj: Construct; allData: AllNeededData): (bool,Option[Construct]) =
   var res:Option[Construct]
   echo "in getParent"
   echo "newobj: ", newobj.kind
   let (dis,pid) = determineParentId(newobj, allData)
-  if newobj.kind != ckNamespace and pid.isSome():
-    assert pid.isSome and not pid.get.isZero
+  if pid.isNone: assert dis == true
+
+  echo dis, pid
+  if pid.isSome and not dis and newobj.kind != ckNamespace: # because namespace has no parent. root is explicit.
+    assert pid.isSome
+    assert not pid.get.isZero
     echo "parent id found: ", $pid
     res = root.infoCenter.fetch(pid.get)
     if res.isNone:
-      echo "couldn't find registered object for this id"
+      echo "couldn't find registered object for this id" ### NOTE: can happen for IdentifierName since we don't register it. it means the parent was wrongly identified as IdentifierName.
       echo root.infoCenter.keys
-  result = (dis,res)
\ No newline at end of file
+  result = (dis,res)
+  assert (not dis and res.isSome) or (dis and res.isNone), "dis: " & $dis & ", res: " & (if res.isSome: $res.get.kind else: "none")
\ No newline at end of file
diff --git a/tests/samples/biggerAvlTreeTest.cs b/tests/samples/biggerAvlTreeTest.cs
new file mode 100644
index 0000000..6fa2167
--- /dev/null
+++ b/tests/samples/biggerAvlTreeTest.cs
@@ -0,0 +1,272 @@
+using System.Collections.Generic;
+using DataStructures.Trees;
+using Xunit;
+
+namespace UnitTest.DataStructuresTests
+{
+    public static class AVLTreeTest
+    {
+        [Fact]
+        public static void DoTest()
+        {
+            AVLTree<int> avlTree = new AVLTree<int>();
+
+            //
+            // CASE #1
+            // Insert: 4, 5, 7
+            // SIMPLE *left* rotation for node 4.
+            //
+            /***************************************
+             ** UNBALANCED    ===>    BALANCED
+             **     4                   5
+             **      \                 / \
+             **       5       ===>    4   7
+             **        \
+             **         7
+             **
+             ***************************************
+             */
+            avlTree.Insert(4); // insert
+            avlTree.Insert(5); // insert
+            avlTree.Insert(7); // insert
+
+            // ASSERT CAST 1;
+            AssertCase_1(avlTree);
+
+
+            //
+            // CASE #2
+            // Insert to the previous tree: 2 and then 1.
+            // SIMPLE *right* rotation for node 4.
+            //
+            /*********************************************
+             ** UNBALANCED    ===>    BALANCED
+             **        5                 5
+             **       / \               / \
+             **      4   7    ===>     2   7
+             **     /                 / \
+             **    2                 1   4
+             **   /
+             **  1
+             **
+             *********************************************
+             */
+            avlTree.Insert(2); // insert
+            avlTree.Insert(1); // insert
+
+            // ASSERT CASE 2
+            AssertCase_2(avlTree);
+
+
+            //
+            // CASE #3
+            // Insert to the previous tree: 3.
+            // DOUBLE *right* rotation for node 5.
+            //
+            // The double rotation is achieved by:
+            // 1> Simple *left* rotation for node 2, and then
+            // 2> Simple *right* rotation for node 5
+            //
+            /*************************************
+             ** UNBALANCED     ===>    TRANSITION (1st R)    ===>    BALANCED (2nd Rt)
+             **        5                      5                          4
+             **       / \                    / \                        / \
+             **      2   7     ===>         4   7        ===>          2   5
+             **     / \                    /                          / \   \
+             **    1   4                  2                          1   3   7
+             **       /                  / \
+             **      3                  1   3
+             **
+             *************************************
+             */
+            avlTree.Insert(3); // insert
+
+            // ASSERT CASE 3
+            AssertCase_3(avlTree);
+
+
+            //
+            // CASE #4
+            // Insert to the previous tree: 6.
+            // DOUBLE *right* rotation for node 5.
+            //
+            // The double rotation is achieved by:
+            // 1> Simple *right* rotation for node 7, and then
+            // 2> Simple *left* rotation for node 5
+            //
+            /**************************************************************************
+             ** UNBALANCED     ===>    TRANSITION (1st R)    ===>    BALANCED (2nd Rt)
+             **        4                      4                          ..4..
+             **       / \                    / \                        /     \
+             **      2   5     ===>         2   5         ===>         2       6
+             **     / \   \                / \   \                    / \     / \
+             **    1   3   7              1   3   6                  1   3   5   7
+             **           /                        \
+             **          6                          7
+             **
+             **************************************************************************
+             */
+            avlTree.Insert(6); // insert
+
+            // ASSERT CASE 4
+            AssertCase_4(avlTree);
+
+
+            //
+            // CASE #5
+            // REMOVE the tree's root: 4.
+            //
+            /**************************************************************************
+             ** UNBALANCED     ===>    TRANSITION (1st R)    ===>    BALANCED (2nd Rt)
+             **       null                                              .5..
+             **      /   \                                             /    \
+             **     2     6    ===>                      ===>         2      6
+             **    / \   / \                                         / \      \
+             **   1   3 5   7                                       1   3      7
+             **
+             **************************************************************************
+             */
+            avlTree.Remove(avlTree.Root.Value); // REMOVE 4
+
+            // ASSERT CASE 5
+            AssertCase_5(avlTree);
+
+
+            //
+            // CLEAR THE TREE AND START OVER
+            // Compare two binary trees with each other (height-wise) using bulk-inserts
+
+            avlTree = new AVLTree<int>();
+            var bsTree = new BinarySearchTree<int>();
+
+            List<int> treeDataList = new List<int>() { 15, 25, 5, 12, 1, 16, 20, 9, 9, 7, 7, -1, 11, 19, 30, 8, 10, 13, 28, 39 };
+            avlTree.Insert(treeDataList);
+            bsTree.Insert(treeDataList);
+
+            int avlTreeHeight = avlTree.Height;
+            int bsTreeHeight = bsTree.Height;
+
+            Assert.True(avlTreeHeight < bsTreeHeight, "Wrong heights. AVL Tree must be shorted than BS Tree.");
+
+            treeDataList = new List<int>() { 15, 25, 5, 12, 1, 9, 7, -1, 11, 30, 8, 10, 13, 28, 39 };
+            avlTree.Clear();
+            avlTree.Insert(treeDataList);
+
+            //
+            // OUTPUT OF AVL TREE DRAWER
+            /**
+             **     ....9...
+             **    /        \
+             **    5       .12.
+             **   / \     /    \
+             **  1   7   11    25
+             **  /   \   /    /  \
+             ** -1    8 10   15   30
+             **              /   / \
+             **             13  28 39
+             */
+
+        }//end-do-test
+
+
+        //
+        // DEBUG.ASSERT <- CASE 1
+        private static void AssertCase_1(AVLTree<int> avlTree)
+        {
+            var avlRoot = avlTree.Root;
+            Assert.True(avlRoot.Value == 5, "Wrong root.");
+            Assert.True(avlRoot.LeftChild.Value == 4, "Wrong left child.");
+            Assert.True(avlRoot.RightChild.Value == 7, "Wrong right child.");
+
+            Assert.True(
+                avlRoot.LeftChild.Height == 0
+                && avlRoot.RightChild.Height == 0
+                ,
+                "Wrong heights at the leaf nodes!.");
+        }
+
+        // DEBUG.ASSERT <- CASE 2
+        private static void AssertCase_2(AVLTree<int> avlTree)
+        {
+            var avlRoot = avlTree.Root;
+            Assert.True(avlRoot.Value == 5, "Wrong root.");
+            Assert.True(avlRoot.Height == 2, "Wrong root height!");
+            Assert.True(avlRoot.LeftChild.Value == 2, "Wrong left child from root.");
+            Assert.True(avlRoot.RightChild.Value == 7, "Wrong right child from root.");
+            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, "Wrong value at {root->left->left}.");
+            Assert.True(avlRoot.LeftChild.RightChild.Value == 4, "Wrong value at {root->left->right}.");
+
+            Assert.True(
+                avlRoot.LeftChild.LeftChild.Height == 0
+                && avlRoot.LeftChild.RightChild.Height == 0
+                && avlRoot.RightChild.Height == 0
+                ,
+                "Wrong heights at the leaf nodes!.");
+        }
+
+        // DEBUG.ASSERT <- CASE 3
+        private static void AssertCase_3(AVLTree<int> avlTree)
+        {
+            var avlRoot = avlTree.Root;
+            Assert.True(avlRoot.Height == 2, "Wrong root height!");
+            Assert.True(avlRoot.Value == 4, "Wrong root.");
+            Assert.True(avlRoot.LeftChild.Value == 2, "Wrong left child from root.");
+            Assert.True(avlRoot.RightChild.Value == 5, "Wrong right child from root.");
+            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, "Wrong value at {root->left->left}.");
+            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, "Wrong value at {root->left->right}.");
+            Assert.True(avlRoot.RightChild.RightChild.Value == 7, "Wrong value at {root->right->right}.");
+
+            Assert.True(
+                avlRoot.LeftChild.LeftChild.Height == 0
+                && avlRoot.LeftChild.RightChild.Height == 0
+                && avlRoot.RightChild.RightChild.Height == 0
+                ,
+                "Wrong heights at the leaf nodes!.");
+        }
+
+        // DEBUG.ASSERT <- CASE 4
+        private static void AssertCase_4(AVLTree<int> avlTree)
+        {
+            var avlRoot = avlTree.Root;
+            Assert.True(avlRoot.Height == 2, "Wrong root height!");
+            Assert.True(avlRoot.Value == 4, "Wrong root.");
+            Assert.True(avlRoot.LeftChild.Value == 2, "Wrong left child from root.");
+            Assert.True(avlRoot.RightChild.Value == 6, "Wrong right child from root.");
+            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, "Wrong value at {root->left->left}.");
+            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, "Wrong value at {root->left->right}.");
+            Assert.True(avlRoot.RightChild.LeftChild.Value == 5, "Wrong value at {root->right->left}.");
+            Assert.True(avlRoot.RightChild.RightChild.Value == 7, "Wrong value at {root->right->right}.");
+
+            Assert.True(
+                avlRoot.LeftChild.LeftChild.Height == 0
+                && avlRoot.LeftChild.RightChild.Height == 0
+                && avlRoot.RightChild.LeftChild.Height == 0
+                && avlRoot.RightChild.RightChild.Height == 0
+                ,
+                "Wrong heights at the leaf nodes!.");
+        }
+
+        // DEBUG.ASSERT <- CASE 5
+        private static void AssertCase_5(AVLTree<int> avlTree)
+        {
+            var avlRoot = avlTree.Root;
+            Assert.True(avlRoot.Height == 2, "Wrong root height!");
+            Assert.True(avlRoot.Value == 5, "Wrong root.");
+            Assert.True(avlRoot.LeftChild.Value == 2, "Wrong left child from root.");
+            Assert.True(avlRoot.RightChild.Value == 6, "Wrong right child from root.");
+            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, "Wrong value at {root->left->left}.");
+            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, "Wrong value at {root->left->right}.");
+            Assert.True(avlRoot.RightChild.LeftChild == null, "Wrong value at {root->right->left}.");
+            Assert.True(avlRoot.RightChild.RightChild.Value == 7, "Wrong value at {root->right->right}.");
+
+            Assert.True(
+                avlRoot.LeftChild.LeftChild.Height == 0
+                && avlRoot.LeftChild.RightChild.Height == 0
+                && avlRoot.RightChild.RightChild.Height == 0
+                ,
+                "Wrong heights at the leaf nodes!.");
+
+        }
+    }
+
+}
diff --git a/tests/samples/biggerAvlTreeTest.csast b/tests/samples/biggerAvlTreeTest.csast
new file mode 100644
index 0000000..d109cd6
--- /dev/null
+++ b/tests/samples/biggerAvlTreeTest.csast
@@ -0,0 +1 @@
+{"File":"tests/samples/biggerAvlTreeTest.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System.Collections.Generic"],"Extras":[]},"Source":"using System.Collections.Generic;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["System.Collections.Generic"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["System.Collections"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Collections"],"Extras":[]},"Source":"Collections"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Generic"],"Extras":[]},"Source":"Generic"},{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["DataStructures.Trees"],"Extras":[]},"Source":"using DataStructures.Trees;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["DataStructures.Trees"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["DataStructures"],"Extras":[]},"Source":"DataStructures"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Trees"],"Extras":[]},"Source":"Trees"},{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["Xunit"],"Extras":[]},"Source":"using Xunit;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Xunit"],"Extras":[]},"Source":"Xunit"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["UnitTest.DataStructuresTests"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["UnitTest.DataStructuresTests"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["UnitTest"],"Extras":[]},"Source":"UnitTest"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["DataStructuresTests"],"Extras":[]},"Source":"DataStructuresTests\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["AVLTreeTest"],"Extras":["public static"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["DoTest","void"],"Extras":["public static"]},"Source":"        [Fact]\n        public static void DoTest()\n        {\n            AVLTree<int> avlTree = new AVLTree<int>();\n\n            \n            \n            \n            \n            \n            \n            avlTree.Insert(4); \n            avlTree.Insert(5); \n            avlTree.Insert(7); \n\n            \n            AssertCase_1(avlTree);\n\n\n            \n            \n            \n            \n            \n            \n            avlTree.Insert(2); \n            avlTree.Insert(1); \n\n            \n  "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Fact"],"Extras":[]},"Source":"Fact"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["avlTree","AVLTree<int>"],"Extras":[]},"Source":"            AVLTree<int> avlTree = new AVLTree<int>();\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:AVLTree<int>","name:avlTree"],"Extras":[]},"Source":"            AVLTree<int> avlTree = new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"            AVLTree<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree = new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["new AVLTree<int>()"],"Extras":[]},"Source":"= new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["AVLTree<int>"],"Extras":[]},"Source":"new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"AVLTree<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"()"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            \n            \n            \n            \n            \n            \n            avlTree.Insert(4); \n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"\n            \n            \n            \n            \n            \n            \n            avlTree.Insert(4)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"\n            \n            \n            \n            \n            \n            \n            avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"\n            \n            \n            \n            \n            \n            \n            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["4"],"Extras":[]},"Source":"(4)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["4"],"Extras":[]},"Source":"4"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["4"],"Extras":[]},"Source":"4"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            avlTree.Insert(5); \n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"            avlTree.Insert(5)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"            avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["5"],"Extras":[]},"Source":"(5)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["5"],"Extras":[]},"Source":"5"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["5"],"Extras":[]},"Source":"5"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            avlTree.Insert(7); \n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"            avlTree.Insert(7)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"            avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["7"],"Extras":[]},"Source":"(7)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["7"],"Extras":[]},"Source":"7"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["7"],"Extras":[]},"Source":"7"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            \n            AssertCase_1(avlTree);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["AssertCase_1"],"Extras":[]},"Source":"\n            \n            AssertCase_1(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["AssertCase_1"],"Extras":[]},"Source":"\n            \n            AssertCase_1"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n\n            \n            \n            \n            \n            \n            \n            avlTree.Insert(2); \n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            \n            avlTree.Insert(2)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            \n            avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            \n            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["2"],"Extras":[]},"Source":"(2)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            avlTree.Insert(1); \n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"            avlTree.Insert(1)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"            avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["1"],"Extras":[]},"Source":"(1)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            \n            AssertCase_2(avlTree);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["AssertCase_2"],"Extras":[]},"Source":"\n            \n            AssertCase_2(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["AssertCase_2"],"Extras":[]},"Source":"\n            \n            AssertCase_2"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            avlTree.Insert(3); \n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            avlTree.Insert(3)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["3"],"Extras":[]},"Source":"(3)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["3"],"Extras":[]},"Source":"3"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["3"],"Extras":[]},"Source":"3"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            \n            AssertCase_3(avlTree);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["AssertCase_3"],"Extras":[]},"Source":"\n            \n            AssertCase_3(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["AssertCase_3"],"Extras":[]},"Source":"\n            \n            AssertCase_3"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            avlTree.Insert(6); \n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            avlTree.Insert(6)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["6"],"Extras":[]},"Source":"(6)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["6"],"Extras":[]},"Source":"6"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["6"],"Extras":[]},"Source":"6"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            \n            AssertCase_4(avlTree);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["AssertCase_4"],"Extras":[]},"Source":"\n            \n            AssertCase_4(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["AssertCase_4"],"Extras":[]},"Source":"\n            \n            AssertCase_4"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n\n            \n            \n            \n            \n            \n            avlTree.Remove(avlTree.Root.Value); \n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Remove"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            avlTree.Remove(avlTree.Root.Value)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Remove","avlTree"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            avlTree.Remove"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"\n\n            \n            \n            \n            \n            \n            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Remove"],"Extras":[]},"Source":"Remove"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlTree.Root.Value"],"Extras":[]},"Source":"(avlTree.Root.Value)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlTree.Root.Value"],"Extras":[]},"Source":"avlTree.Root.Value"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlTree.Root"],"Extras":[]},"Source":"avlTree.Root.Value"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Root","avlTree"],"Extras":[]},"Source":"avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Root"],"Extras":[]},"Source":"Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            \n            AssertCase_5(avlTree);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["AssertCase_5"],"Extras":[]},"Source":"\n            \n            AssertCase_5(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["AssertCase_5"],"Extras":[]},"Source":"\n            \n            AssertCase_5"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n\n            \n            \n            \n\n            avlTree = new AVLTree<int>();\n"},{"Kind":0,"KindStr":"Decl","Declaration":"AssignmentExpression","Info":{"Essentials":["avlTree","=","new AVLTree<int>()"],"Extras":[]},"Source":"\n\n            \n            \n            \n\n            avlTree = new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"\n\n            \n            \n            \n\n            avlTree "},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["AVLTree<int>"],"Extras":[]},"Source":"new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"AVLTree<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"()"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["bsTree","var"],"Extras":[]},"Source":"            var bsTree = new BinarySearchTree<int>();\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:var","name:bsTree"],"Extras":[]},"Source":"            var bsTree = new BinarySearchTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["var"],"Extras":[]},"Source":"            var "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["bsTree"],"Extras":[]},"Source":"bsTree = new BinarySearchTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["new BinarySearchTree<int>()"],"Extras":[]},"Source":"= new BinarySearchTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["BinarySearchTree<int>"],"Extras":[]},"Source":"new BinarySearchTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","BinarySearchTree","<int>","int"],"Extras":[]},"Source":"BinarySearchTree<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"()"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["treeDataList","List<int>"],"Extras":[]},"Source":"\n            List<int> treeDataList = new List<int>() { 15, 25, 5, 12, 1, 16, 20, 9, 9, 7, 7, -1, 11, 19, 30, 8, 10, 13, 28, 39 };\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:List<int>","name:treeDataList"],"Extras":[]},"Source":"\n            List<int> treeDataList = new List<int>() { 15, 25, 5, 12, 1, 16, 20, 9, 9, 7, 7, -1, 11, 19, 30, 8, 10, 13, 28, 39 }"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","List","<int>","int"],"Extras":[]},"Source":"\n            List<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"treeDataList = new List<int>() { 15, 25, 5, 12, 1, 16, 20, 9, 9, 7, 7, -1, 11, 19, 30, 8, 10, 13, 28, 39 }"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["new List<int>() { 15, 25, 5, 12, 1, 16, 20, 9, 9, 7, 7, -1, 11, 19, 30, 8, 10, 13, 28, 39 }"],"Extras":[]},"Source":"= new List<int>() { 15, 25, 5, 12, 1, 16, 20, 9, 9, 7, 7, -1, 11, 19, 30, 8, 10, 13, 28, 39 }"},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["List<int>"],"Extras":[]},"Source":"new List<int>() { 15, 25, 5, 12, 1, 16, 20, 9, 9, 7, 7, -1, 11, 19, 30, 8, 10, 13, 28, 39 }"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","List","<int>","int"],"Extras":[]},"Source":"List<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"() "},{"Kind":0,"KindStr":"Decl","Declaration":"InitializerExpression","Info":{"Essentials":["20","15, 25, 5, 12, 1, 16, 20, 9, 9, 7, 7, -1, 11, 19, 30, 8, 10, 13, 28, 39"],"Extras":[]},"Source":"{ 15, 25, 5, 12, 1, 16, 20, 9, 9, 7, 7, -1, 11, 19, 30, 8, 10, 13, 28, 39 }"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["15"],"Extras":[]},"Source":"15"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["25"],"Extras":[]},"Source":"25"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["5"],"Extras":[]},"Source":"5"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["12"],"Extras":[]},"Source":"12"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["16"],"Extras":[]},"Source":"16"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["20"],"Extras":[]},"Source":"20"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["9"],"Extras":[]},"Source":"9"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["9"],"Extras":[]},"Source":"9"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["7"],"Extras":[]},"Source":"7"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["7"],"Extras":[]},"Source":"7"},{"Kind":0,"KindStr":"Decl","Declaration":"PrefixUnaryExpression","Info":{"Essentials":["-","1"],"Extras":[]},"Source":"-1"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["11"],"Extras":[]},"Source":"11"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["19"],"Extras":[]},"Source":"19"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["30"],"Extras":[]},"Source":"30"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["8"],"Extras":[]},"Source":"8"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["10"],"Extras":[]},"Source":"10"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["13"],"Extras":[]},"Source":"13"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["28"],"Extras":[]},"Source":"28"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["39"],"Extras":[]},"Source":"39 "},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            avlTree.Insert(treeDataList);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"            avlTree.Insert(treeDataList)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"            avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"(treeDataList)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"treeDataList"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"treeDataList"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            bsTree.Insert(treeDataList);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["bsTree.Insert"],"Extras":[]},"Source":"            bsTree.Insert(treeDataList)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","bsTree"],"Extras":[]},"Source":"            bsTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["bsTree"],"Extras":[]},"Source":"            bsTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"(treeDataList)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"treeDataList"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"treeDataList"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["avlTreeHeight","int"],"Extras":[]},"Source":"\n            int avlTreeHeight = avlTree.Height;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:int","name:avlTreeHeight"],"Extras":[]},"Source":"\n            int avlTreeHeight = avlTree.Height"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"\n            int "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["avlTreeHeight"],"Extras":[]},"Source":"avlTreeHeight = avlTree.Height"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["avlTree.Height"],"Extras":[]},"Source":"= avlTree.Height"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlTree"],"Extras":[]},"Source":"avlTree.Height"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["bsTreeHeight","int"],"Extras":[]},"Source":"            int bsTreeHeight = bsTree.Height;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:int","name:bsTreeHeight"],"Extras":[]},"Source":"            int bsTreeHeight = bsTree.Height"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"            int "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["bsTreeHeight"],"Extras":[]},"Source":"bsTreeHeight = bsTree.Height"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["bsTree.Height"],"Extras":[]},"Source":"= bsTree.Height"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","bsTree"],"Extras":[]},"Source":"bsTree.Height"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["bsTree"],"Extras":[]},"Source":"bsTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            Assert.True(avlTreeHeight < bsTreeHeight, \"Wrong heights. AVL Tree must be shorted than BS Tree.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"\n            Assert.True(avlTreeHeight < bsTreeHeight, \"Wrong heights. AVL Tree must be shorted than BS Tree.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"\n            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"\n            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlTreeHeight < bsTreeHeight, \"Wrong heights. AVL Tree must be shorted than BS Tree.\""],"Extras":[]},"Source":"(avlTreeHeight < bsTreeHeight, \"Wrong heights. AVL Tree must be shorted than BS Tree.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlTreeHeight < bsTreeHeight"],"Extras":[]},"Source":"avlTreeHeight < bsTreeHeight"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlTreeHeight","<","bsTreeHeight"],"Extras":[]},"Source":"avlTreeHeight < bsTreeHeight"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTreeHeight"],"Extras":[]},"Source":"avlTreeHeight "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["bsTreeHeight"],"Extras":[]},"Source":"bsTreeHeight"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong heights. AVL Tree must be shorted than BS Tree.\""],"Extras":[]},"Source":"\"Wrong heights. AVL Tree must be shorted than BS Tree.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong heights. AVL Tree must be shorted than BS Tree.\""],"Extras":[]},"Source":"\"Wrong heights. AVL Tree must be shorted than BS Tree.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            treeDataList = new List<int>() { 15, 25, 5, 12, 1, 9, 7, -1, 11, 30, 8, 10, 13, 28, 39 };\n"},{"Kind":0,"KindStr":"Decl","Declaration":"AssignmentExpression","Info":{"Essentials":["treeDataList","=","new List<int>() { 15, 25, 5, 12, 1, 9, 7, -1, 11, 30, 8, 10, 13, 28, 39 }"],"Extras":[]},"Source":"\n            treeDataList = new List<int>() { 15, 25, 5, 12, 1, 9, 7, -1, 11, 30, 8, 10, 13, 28, 39 }"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"\n            treeDataList "},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["List<int>"],"Extras":[]},"Source":"new List<int>() { 15, 25, 5, 12, 1, 9, 7, -1, 11, 30, 8, 10, 13, 28, 39 }"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","List","<int>","int"],"Extras":[]},"Source":"List<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"() "},{"Kind":0,"KindStr":"Decl","Declaration":"InitializerExpression","Info":{"Essentials":["15","15, 25, 5, 12, 1, 9, 7, -1, 11, 30, 8, 10, 13, 28, 39"],"Extras":[]},"Source":"{ 15, 25, 5, 12, 1, 9, 7, -1, 11, 30, 8, 10, 13, 28, 39 }"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["15"],"Extras":[]},"Source":"15"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["25"],"Extras":[]},"Source":"25"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["5"],"Extras":[]},"Source":"5"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["12"],"Extras":[]},"Source":"12"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["9"],"Extras":[]},"Source":"9"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["7"],"Extras":[]},"Source":"7"},{"Kind":0,"KindStr":"Decl","Declaration":"PrefixUnaryExpression","Info":{"Essentials":["-","1"],"Extras":[]},"Source":"-1"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["11"],"Extras":[]},"Source":"11"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["30"],"Extras":[]},"Source":"30"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["8"],"Extras":[]},"Source":"8"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["10"],"Extras":[]},"Source":"10"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["13"],"Extras":[]},"Source":"13"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["28"],"Extras":[]},"Source":"28"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["39"],"Extras":[]},"Source":"39 "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            avlTree.Clear();\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Clear"],"Extras":[]},"Source":"            avlTree.Clear()"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Clear","avlTree"],"Extras":[]},"Source":"            avlTree.Clear"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Clear"],"Extras":[]},"Source":"Clear"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"()"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            avlTree.Insert(treeDataList);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"            avlTree.Insert(treeDataList)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"            avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"            avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"(treeDataList)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"treeDataList"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"treeDataList"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["AssertCase_1","void"],"Extras":["private static"]},"Source":"\n\n        \n        \n        private static void AssertCase_1(AVLTree<int> avlTree)\n        {\n            var avlRoot = avlTree.Root;\n            Assert.True(avlRoot.Value == 5, \"Wrong root.\");\n            Assert.True(avlRoot.LeftChild.Value == 4, \"Wrong left child.\");\n            Assert.True(avlRoot.RightChild.Value == 7, \"Wrong right child.\");\n\n            Assert.True(\n                avlRoot.LeftChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n                ,\n             "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["AVLTree<int> avlTree"],"Extras":[]},"Source":"(AVLTree<int> avlTree)\n"},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["avlTree","AVLTree<int> "],"Extras":[]},"Source":"AVLTree<int> avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"AVLTree<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["avlRoot","var"],"Extras":[]},"Source":"            var avlRoot = avlTree.Root;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:var","name:avlRoot"],"Extras":[]},"Source":"            var avlRoot = avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["var"],"Extras":[]},"Source":"            var "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot = avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["avlTree.Root"],"Extras":[]},"Source":"= avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Root","avlTree"],"Extras":[]},"Source":"avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Root"],"Extras":[]},"Source":"Root"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.Value == 5, \"Wrong root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.Value == 5, \"Wrong root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.Value == 5, \"Wrong root.\""],"Extras":[]},"Source":"(avlRoot.Value == 5, \"Wrong root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.Value == 5"],"Extras":[]},"Source":"avlRoot.Value == 5"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.Value","==","5"],"Extras":[]},"Source":"avlRoot.Value == 5"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot"],"Extras":[]},"Source":"avlRoot.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["5"],"Extras":[]},"Source":"5"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong root.\""],"Extras":[]},"Source":"\"Wrong root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong root.\""],"Extras":[]},"Source":"\"Wrong root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.Value == 4, \"Wrong left child.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.Value == 4, \"Wrong left child.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.Value == 4, \"Wrong left child.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.Value == 4, \"Wrong left child.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.Value == 4"],"Extras":[]},"Source":"avlRoot.LeftChild.Value == 4"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.Value","==","4"],"Extras":[]},"Source":"avlRoot.LeftChild.Value == 4"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["4"],"Extras":[]},"Source":"4"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong left child.\""],"Extras":[]},"Source":"\"Wrong left child.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong left child.\""],"Extras":[]},"Source":"\"Wrong left child.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.RightChild.Value == 7, \"Wrong right child.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.RightChild.Value == 7, \"Wrong right child.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.RightChild.Value == 7, \"Wrong right child.\""],"Extras":[]},"Source":"(avlRoot.RightChild.Value == 7, \"Wrong right child.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.RightChild.Value == 7"],"Extras":[]},"Source":"avlRoot.RightChild.Value == 7"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.Value","==","7"],"Extras":[]},"Source":"avlRoot.RightChild.Value == 7"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["7"],"Extras":[]},"Source":"7"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong right child.\""],"Extras":[]},"Source":"\"Wrong right child.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong right child.\""],"Extras":[]},"Source":"\"Wrong right child.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            Assert.True(\n                avlRoot.LeftChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"\n            Assert.True(\n                avlRoot.LeftChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"\n            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"\n            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"(\n                avlRoot.LeftChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["                avlRoot.LeftChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n"],"Extras":[]},"Source":"                avlRoot.LeftChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.Height == 0","&&","avlRoot.RightChild.Height == 0"],"Extras":[]},"Source":"                avlRoot.LeftChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.Height","==","0"],"Extras":[]},"Source":"                avlRoot.LeftChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.LeftChild"],"Extras":[]},"Source":"                avlRoot.LeftChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"                avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"                avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.Height","==","0"],"Extras":[]},"Source":"avlRoot.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["                \"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"                \"Wrong heights at the leaf nodes!.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"                \"Wrong heights at the leaf nodes!.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["AssertCase_2","void"],"Extras":["private static"]},"Source":"\n        \n        private static void AssertCase_2(AVLTree<int> avlTree)\n        {\n            var avlRoot = avlTree.Root;\n            Assert.True(avlRoot.Value == 5, \"Wrong root.\");\n            Assert.True(avlRoot.Height == 2, \"Wrong root height!\");\n            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\");\n            Assert.True(avlRoot.RightChild.Value == 7, \"Wrong right child from root.\");\n            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong valu"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["AVLTree<int> avlTree"],"Extras":[]},"Source":"(AVLTree<int> avlTree)\n"},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["avlTree","AVLTree<int> "],"Extras":[]},"Source":"AVLTree<int> avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"AVLTree<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["avlRoot","var"],"Extras":[]},"Source":"            var avlRoot = avlTree.Root;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:var","name:avlRoot"],"Extras":[]},"Source":"            var avlRoot = avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["var"],"Extras":[]},"Source":"            var "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot = avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["avlTree.Root"],"Extras":[]},"Source":"= avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Root","avlTree"],"Extras":[]},"Source":"avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Root"],"Extras":[]},"Source":"Root"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.Value == 5, \"Wrong root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.Value == 5, \"Wrong root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.Value == 5, \"Wrong root.\""],"Extras":[]},"Source":"(avlRoot.Value == 5, \"Wrong root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.Value == 5"],"Extras":[]},"Source":"avlRoot.Value == 5"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.Value","==","5"],"Extras":[]},"Source":"avlRoot.Value == 5"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot"],"Extras":[]},"Source":"avlRoot.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["5"],"Extras":[]},"Source":"5"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong root.\""],"Extras":[]},"Source":"\"Wrong root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong root.\""],"Extras":[]},"Source":"\"Wrong root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.Height == 2, \"Wrong root height!\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.Height == 2, \"Wrong root height!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.Height == 2, \"Wrong root height!\""],"Extras":[]},"Source":"(avlRoot.Height == 2, \"Wrong root height!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.Height == 2"],"Extras":[]},"Source":"avlRoot.Height == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.Height","==","2"],"Extras":[]},"Source":"avlRoot.Height == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot"],"Extras":[]},"Source":"avlRoot.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong root height!\""],"Extras":[]},"Source":"\"Wrong root height!\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong root height!\""],"Extras":[]},"Source":"\"Wrong root height!\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.Value == 2"],"Extras":[]},"Source":"avlRoot.LeftChild.Value == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.Value","==","2"],"Extras":[]},"Source":"avlRoot.LeftChild.Value == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong left child from root.\""],"Extras":[]},"Source":"\"Wrong left child from root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong left child from root.\""],"Extras":[]},"Source":"\"Wrong left child from root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.RightChild.Value == 7, \"Wrong right child from root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.RightChild.Value == 7, \"Wrong right child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.RightChild.Value == 7, \"Wrong right child from root.\""],"Extras":[]},"Source":"(avlRoot.RightChild.Value == 7, \"Wrong right child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.RightChild.Value == 7"],"Extras":[]},"Source":"avlRoot.RightChild.Value == 7"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.Value","==","7"],"Extras":[]},"Source":"avlRoot.RightChild.Value == 7"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["7"],"Extras":[]},"Source":"7"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong right child from root.\""],"Extras":[]},"Source":"\"Wrong right child from root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong right child from root.\""],"Extras":[]},"Source":"\"Wrong right child from root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value == 1"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value == 1"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value","==","1"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value == 1"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->left}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->left}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.RightChild.Value == 4, \"Wrong value at {root->left->right}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.RightChild.Value == 4, \"Wrong value at {root->left->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value == 4, \"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.RightChild.Value == 4, \"Wrong value at {root->left->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value == 4"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value == 4"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value","==","4"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value == 4"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild.RightChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["4"],"Extras":[]},"Source":"4"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->right}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->right}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            Assert.True(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"\n            Assert.True(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"\n            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"\n            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0","&&","avlRoot.RightChild.Height == 0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0","&&","avlRoot.LeftChild.RightChild.Height == 0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height","==","0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.LeftChild.LeftChild"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.LeftChild"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"                avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"                avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Height","==","0"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.LeftChild.RightChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.Height","==","0"],"Extras":[]},"Source":"avlRoot.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["                \"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"                \"Wrong heights at the leaf nodes!.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"                \"Wrong heights at the leaf nodes!.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["AssertCase_3","void"],"Extras":["private static"]},"Source":"\n        \n        private static void AssertCase_3(AVLTree<int> avlTree)\n        {\n            var avlRoot = avlTree.Root;\n            Assert.True(avlRoot.Height == 2, \"Wrong root height!\");\n            Assert.True(avlRoot.Value == 4, \"Wrong root.\");\n            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\");\n            Assert.True(avlRoot.RightChild.Value == 5, \"Wrong right child from root.\");\n            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong valu"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["AVLTree<int> avlTree"],"Extras":[]},"Source":"(AVLTree<int> avlTree)\n"},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["avlTree","AVLTree<int> "],"Extras":[]},"Source":"AVLTree<int> avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"AVLTree<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["avlRoot","var"],"Extras":[]},"Source":"            var avlRoot = avlTree.Root;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:var","name:avlRoot"],"Extras":[]},"Source":"            var avlRoot = avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["var"],"Extras":[]},"Source":"            var "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot = avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["avlTree.Root"],"Extras":[]},"Source":"= avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Root","avlTree"],"Extras":[]},"Source":"avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Root"],"Extras":[]},"Source":"Root"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.Height == 2, \"Wrong root height!\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.Height == 2, \"Wrong root height!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.Height == 2, \"Wrong root height!\""],"Extras":[]},"Source":"(avlRoot.Height == 2, \"Wrong root height!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.Height == 2"],"Extras":[]},"Source":"avlRoot.Height == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.Height","==","2"],"Extras":[]},"Source":"avlRoot.Height == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot"],"Extras":[]},"Source":"avlRoot.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong root height!\""],"Extras":[]},"Source":"\"Wrong root height!\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong root height!\""],"Extras":[]},"Source":"\"Wrong root height!\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.Value == 4, \"Wrong root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.Value == 4, \"Wrong root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.Value == 4, \"Wrong root.\""],"Extras":[]},"Source":"(avlRoot.Value == 4, \"Wrong root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.Value == 4"],"Extras":[]},"Source":"avlRoot.Value == 4"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.Value","==","4"],"Extras":[]},"Source":"avlRoot.Value == 4"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot"],"Extras":[]},"Source":"avlRoot.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["4"],"Extras":[]},"Source":"4"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong root.\""],"Extras":[]},"Source":"\"Wrong root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong root.\""],"Extras":[]},"Source":"\"Wrong root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.Value == 2"],"Extras":[]},"Source":"avlRoot.LeftChild.Value == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.Value","==","2"],"Extras":[]},"Source":"avlRoot.LeftChild.Value == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong left child from root.\""],"Extras":[]},"Source":"\"Wrong left child from root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong left child from root.\""],"Extras":[]},"Source":"\"Wrong left child from root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.RightChild.Value == 5, \"Wrong right child from root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.RightChild.Value == 5, \"Wrong right child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.RightChild.Value == 5, \"Wrong right child from root.\""],"Extras":[]},"Source":"(avlRoot.RightChild.Value == 5, \"Wrong right child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.RightChild.Value == 5"],"Extras":[]},"Source":"avlRoot.RightChild.Value == 5"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.Value","==","5"],"Extras":[]},"Source":"avlRoot.RightChild.Value == 5"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["5"],"Extras":[]},"Source":"5"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong right child from root.\""],"Extras":[]},"Source":"\"Wrong right child from root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong right child from root.\""],"Extras":[]},"Source":"\"Wrong right child from root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value == 1"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value == 1"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value","==","1"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value == 1"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->left}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->left}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value == 3"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value == 3"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value","==","3"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value == 3"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild.RightChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["3"],"Extras":[]},"Source":"3"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->right}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->right}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\""],"Extras":[]},"Source":"(avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.RightChild.RightChild.Value == 7"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Value == 7"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.RightChild.Value","==","7"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Value == 7"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.RightChild.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["7"],"Extras":[]},"Source":"7"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->right->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->right->right}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->right->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->right->right}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            Assert.True(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"\n            Assert.True(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"\n            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"\n            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0","&&","avlRoot.RightChild.RightChild.Height == 0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0","&&","avlRoot.LeftChild.RightChild.Height == 0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height","==","0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.LeftChild.LeftChild"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.LeftChild"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"                avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"                avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Height","==","0"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.LeftChild.RightChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.RightChild.Height","==","0"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.RightChild.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["                \"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"                \"Wrong heights at the leaf nodes!.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"                \"Wrong heights at the leaf nodes!.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["AssertCase_4","void"],"Extras":["private static"]},"Source":"\n        \n        private static void AssertCase_4(AVLTree<int> avlTree)\n        {\n            var avlRoot = avlTree.Root;\n            Assert.True(avlRoot.Height == 2, \"Wrong root height!\");\n            Assert.True(avlRoot.Value == 4, \"Wrong root.\");\n            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\");\n            Assert.True(avlRoot.RightChild.Value == 6, \"Wrong right child from root.\");\n            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong valu"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["AVLTree<int> avlTree"],"Extras":[]},"Source":"(AVLTree<int> avlTree)\n"},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["avlTree","AVLTree<int> "],"Extras":[]},"Source":"AVLTree<int> avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"AVLTree<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["avlRoot","var"],"Extras":[]},"Source":"            var avlRoot = avlTree.Root;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:var","name:avlRoot"],"Extras":[]},"Source":"            var avlRoot = avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["var"],"Extras":[]},"Source":"            var "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot = avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["avlTree.Root"],"Extras":[]},"Source":"= avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Root","avlTree"],"Extras":[]},"Source":"avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Root"],"Extras":[]},"Source":"Root"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.Height == 2, \"Wrong root height!\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.Height == 2, \"Wrong root height!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.Height == 2, \"Wrong root height!\""],"Extras":[]},"Source":"(avlRoot.Height == 2, \"Wrong root height!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.Height == 2"],"Extras":[]},"Source":"avlRoot.Height == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.Height","==","2"],"Extras":[]},"Source":"avlRoot.Height == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot"],"Extras":[]},"Source":"avlRoot.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong root height!\""],"Extras":[]},"Source":"\"Wrong root height!\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong root height!\""],"Extras":[]},"Source":"\"Wrong root height!\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.Value == 4, \"Wrong root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.Value == 4, \"Wrong root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.Value == 4, \"Wrong root.\""],"Extras":[]},"Source":"(avlRoot.Value == 4, \"Wrong root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.Value == 4"],"Extras":[]},"Source":"avlRoot.Value == 4"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.Value","==","4"],"Extras":[]},"Source":"avlRoot.Value == 4"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot"],"Extras":[]},"Source":"avlRoot.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["4"],"Extras":[]},"Source":"4"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong root.\""],"Extras":[]},"Source":"\"Wrong root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong root.\""],"Extras":[]},"Source":"\"Wrong root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.Value == 2"],"Extras":[]},"Source":"avlRoot.LeftChild.Value == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.Value","==","2"],"Extras":[]},"Source":"avlRoot.LeftChild.Value == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong left child from root.\""],"Extras":[]},"Source":"\"Wrong left child from root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong left child from root.\""],"Extras":[]},"Source":"\"Wrong left child from root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.RightChild.Value == 6, \"Wrong right child from root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.RightChild.Value == 6, \"Wrong right child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.RightChild.Value == 6, \"Wrong right child from root.\""],"Extras":[]},"Source":"(avlRoot.RightChild.Value == 6, \"Wrong right child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.RightChild.Value == 6"],"Extras":[]},"Source":"avlRoot.RightChild.Value == 6"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.Value","==","6"],"Extras":[]},"Source":"avlRoot.RightChild.Value == 6"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["6"],"Extras":[]},"Source":"6"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong right child from root.\""],"Extras":[]},"Source":"\"Wrong right child from root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong right child from root.\""],"Extras":[]},"Source":"\"Wrong right child from root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value == 1"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value == 1"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value","==","1"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value == 1"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->left}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->left}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value == 3"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value == 3"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value","==","3"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value == 3"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild.RightChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["3"],"Extras":[]},"Source":"3"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->right}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->right}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.RightChild.LeftChild.Value == 5, \"Wrong value at {root->right->left}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.RightChild.LeftChild.Value == 5, \"Wrong value at {root->right->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.RightChild.LeftChild.Value == 5, \"Wrong value at {root->right->left}.\""],"Extras":[]},"Source":"(avlRoot.RightChild.LeftChild.Value == 5, \"Wrong value at {root->right->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.RightChild.LeftChild.Value == 5"],"Extras":[]},"Source":"avlRoot.RightChild.LeftChild.Value == 5"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.LeftChild.Value","==","5"],"Extras":[]},"Source":"avlRoot.RightChild.LeftChild.Value == 5"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.RightChild.LeftChild"],"Extras":[]},"Source":"avlRoot.RightChild.LeftChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["5"],"Extras":[]},"Source":"5"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->right->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->right->left}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->right->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->right->left}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\""],"Extras":[]},"Source":"(avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.RightChild.RightChild.Value == 7"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Value == 7"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.RightChild.Value","==","7"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Value == 7"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.RightChild.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["7"],"Extras":[]},"Source":"7"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->right->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->right->right}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->right->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->right->right}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            Assert.True(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.LeftChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"\n            Assert.True(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.LeftChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"\n            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"\n            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.LeftChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.LeftChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.LeftChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.LeftChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.LeftChild.Height == 0","&&","avlRoot.RightChild.RightChild.Height == 0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.LeftChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0","&&","avlRoot.RightChild.LeftChild.Height == 0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.LeftChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0","&&","avlRoot.LeftChild.RightChild.Height == 0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height","==","0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.LeftChild.LeftChild"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.LeftChild"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"                avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"                avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Height","==","0"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.LeftChild.RightChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.LeftChild.Height","==","0"],"Extras":[]},"Source":"avlRoot.RightChild.LeftChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.RightChild.LeftChild"],"Extras":[]},"Source":"avlRoot.RightChild.LeftChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.RightChild.Height","==","0"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.RightChild.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["                \"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"                \"Wrong heights at the leaf nodes!.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"                \"Wrong heights at the leaf nodes!.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["AssertCase_5","void"],"Extras":["private static"]},"Source":"\n        \n        private static void AssertCase_5(AVLTree<int> avlTree)\n        {\n            var avlRoot = avlTree.Root;\n            Assert.True(avlRoot.Height == 2, \"Wrong root height!\");\n            Assert.True(avlRoot.Value == 5, \"Wrong root.\");\n            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\");\n            Assert.True(avlRoot.RightChild.Value == 6, \"Wrong right child from root.\");\n            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong valu"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["AVLTree<int> avlTree"],"Extras":[]},"Source":"(AVLTree<int> avlTree)\n"},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["avlTree","AVLTree<int> "],"Extras":[]},"Source":"AVLTree<int> avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"AVLTree<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["avlRoot","var"],"Extras":[]},"Source":"            var avlRoot = avlTree.Root;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:var","name:avlRoot"],"Extras":[]},"Source":"            var avlRoot = avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["var"],"Extras":[]},"Source":"            var "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot = avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["avlTree.Root"],"Extras":[]},"Source":"= avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Root","avlTree"],"Extras":[]},"Source":"avlTree.Root"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Root"],"Extras":[]},"Source":"Root"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.Height == 2, \"Wrong root height!\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.Height == 2, \"Wrong root height!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.Height == 2, \"Wrong root height!\""],"Extras":[]},"Source":"(avlRoot.Height == 2, \"Wrong root height!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.Height == 2"],"Extras":[]},"Source":"avlRoot.Height == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.Height","==","2"],"Extras":[]},"Source":"avlRoot.Height == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot"],"Extras":[]},"Source":"avlRoot.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong root height!\""],"Extras":[]},"Source":"\"Wrong root height!\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong root height!\""],"Extras":[]},"Source":"\"Wrong root height!\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.Value == 5, \"Wrong root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.Value == 5, \"Wrong root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.Value == 5, \"Wrong root.\""],"Extras":[]},"Source":"(avlRoot.Value == 5, \"Wrong root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.Value == 5"],"Extras":[]},"Source":"avlRoot.Value == 5"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.Value","==","5"],"Extras":[]},"Source":"avlRoot.Value == 5"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot"],"Extras":[]},"Source":"avlRoot.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["5"],"Extras":[]},"Source":"5"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong root.\""],"Extras":[]},"Source":"\"Wrong root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong root.\""],"Extras":[]},"Source":"\"Wrong root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.Value == 2, \"Wrong left child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.Value == 2"],"Extras":[]},"Source":"avlRoot.LeftChild.Value == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.Value","==","2"],"Extras":[]},"Source":"avlRoot.LeftChild.Value == 2"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong left child from root.\""],"Extras":[]},"Source":"\"Wrong left child from root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong left child from root.\""],"Extras":[]},"Source":"\"Wrong left child from root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.RightChild.Value == 6, \"Wrong right child from root.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.RightChild.Value == 6, \"Wrong right child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.RightChild.Value == 6, \"Wrong right child from root.\""],"Extras":[]},"Source":"(avlRoot.RightChild.Value == 6, \"Wrong right child from root.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.RightChild.Value == 6"],"Extras":[]},"Source":"avlRoot.RightChild.Value == 6"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.Value","==","6"],"Extras":[]},"Source":"avlRoot.RightChild.Value == 6"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["6"],"Extras":[]},"Source":"6"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong right child from root.\""],"Extras":[]},"Source":"\"Wrong right child from root.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong right child from root.\""],"Extras":[]},"Source":"\"Wrong right child from root.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.LeftChild.Value == 1, \"Wrong value at {root->left->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value == 1"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value == 1"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Value","==","1"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value == 1"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->left}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->left->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->left}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"(avlRoot.LeftChild.RightChild.Value == 3, \"Wrong value at {root->left->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value == 3"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value == 3"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Value","==","3"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value == 3"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.LeftChild.RightChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["3"],"Extras":[]},"Source":"3"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->right}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->left->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->left->right}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.RightChild.LeftChild == null, \"Wrong value at {root->right->left}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.RightChild.LeftChild == null, \"Wrong value at {root->right->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.RightChild.LeftChild == null, \"Wrong value at {root->right->left}.\""],"Extras":[]},"Source":"(avlRoot.RightChild.LeftChild == null, \"Wrong value at {root->right->left}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.RightChild.LeftChild == null"],"Extras":[]},"Source":"avlRoot.RightChild.LeftChild == null"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.LeftChild","==","null"],"Extras":[]},"Source":"avlRoot.RightChild.LeftChild == null"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.LeftChild "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["null"],"Extras":[]},"Source":"null"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->right->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->right->left}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->right->left}.\""],"Extras":[]},"Source":"\"Wrong value at {root->right->left}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"            Assert.True(avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"            Assert.True(avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\""],"Extras":[]},"Source":"(avlRoot.RightChild.RightChild.Value == 7, \"Wrong value at {root->right->right}.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlRoot.RightChild.RightChild.Value == 7"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Value == 7"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.RightChild.Value","==","7"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Value == 7"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Value","avlRoot.RightChild.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Value "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Value"],"Extras":[]},"Source":"Value "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["7"],"Extras":[]},"Source":"7"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Wrong value at {root->right->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->right->right}.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong value at {root->right->right}.\""],"Extras":[]},"Source":"\"Wrong value at {root->right->right}.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["4"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"\n            Assert.True(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Assert.True"],"Extras":[]},"Source":"\n            Assert.True(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["True","Assert"],"Extras":[]},"Source":"\n            Assert.True"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Assert"],"Extras":[]},"Source":"\n            Assert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["True"],"Extras":[]},"Source":"True"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"(\n                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n                ,\n                \"Wrong heights at the leaf nodes!.\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0","&&","avlRoot.RightChild.RightChild.Height == 0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n                && avlRoot.RightChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height == 0","&&","avlRoot.LeftChild.RightChild.Height == 0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n                && avlRoot.LeftChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.LeftChild.Height","==","0"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.LeftChild.LeftChild"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot.LeftChild"],"Extras":[]},"Source":"                avlRoot.LeftChild.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"                avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"                avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.LeftChild.RightChild.Height","==","0"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.LeftChild.RightChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.LeftChild"],"Extras":[]},"Source":"avlRoot.LeftChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["LeftChild","avlRoot"],"Extras":[]},"Source":"avlRoot.LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["LeftChild"],"Extras":[]},"Source":"LeftChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlRoot.RightChild.RightChild.Height","==","0"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Height == 0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Height","avlRoot.RightChild.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild.Height "},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot.RightChild"],"Extras":[]},"Source":"avlRoot.RightChild.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["RightChild","avlRoot"],"Extras":[]},"Source":"avlRoot.RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlRoot"],"Extras":[]},"Source":"avlRoot"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["RightChild"],"Extras":[]},"Source":"RightChild"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Height"],"Extras":[]},"Source":"Height "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["0"],"Extras":[]},"Source":"0\n"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["                \"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"                \"Wrong heights at the leaf nodes!.\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Wrong heights at the leaf nodes!.\""],"Extras":[]},"Source":"                \"Wrong heights at the leaf nodes!.\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["3","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ExpressionStatement"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/binexp.csast b/tests/samples/binexp.csast
index cbbc3b7..4c02eae 100644
--- a/tests/samples/binexp.csast
+++ b/tests/samples/binexp.csast
@@ -1,212 +1 @@
-{
-  "File": "../cs2nim/tests/samples/binexp.cs",
-  "Lines": [
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "BlockStarts",
-      "Info": {
-        "Essentials": [
-          "1"
-        ],
-        "Extras": [
-          "ClassDeclaration"
-        ]
-      },
-      "Source": null
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "ClassDeclaration",
-      "Info": {
-        "Essentials": [
-          "AVLTreeTest"
-        ],
-        "Extras": [
-          "public static"
-        ]
-      },
-      "Source": null
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "BlockStarts",
-      "Info": {
-        "Essentials": [
-          "2"
-        ],
-        "Extras": [
-          "MethodDeclaration"
-        ]
-      },
-      "Source": null
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "MethodDeclaration",
-      "Info": {
-        "Essentials": [
-          "BinExpExample",
-          "void"
-        ],
-        "Extras": [
-          "public static"
-        ]
-      },
-      "Source": "  public static void BinExpExample()\n  {\n    var res = avlTreeHeight < bsTreeHeight;\n  }\n"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "PredefinedType",
-      "Info": {
-        "Essentials": [
-          "void"
-        ],
-        "Extras": []
-      },
-      "Source": "void "
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "ParameterList",
-      "Info": {
-        "Essentials": [
-          ""
-        ],
-        "Extras": []
-      },
-      "Source": "()\n"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "LocalDeclarationStatement",
-      "Info": {
-        "Essentials": [
-          "res",
-          "var"
-        ],
-        "Extras": []
-      },
-      "Source": "    var res = avlTreeHeight < bsTreeHeight;\n"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "VariableDeclaration",
-      "Info": {
-        "Essentials": [
-          "type:var",
-          "name:res"
-        ],
-        "Extras": []
-      },
-      "Source": "    var res = avlTreeHeight < bsTreeHeight"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "IdentifierName",
-      "Info": {
-        "Essentials": [
-          "var"
-        ],
-        "Extras": []
-      },
-      "Source": "    var "
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "VariableDeclarator",
-      "Info": {
-        "Essentials": [
-          "res"
-        ],
-        "Extras": []
-      },
-      "Source": "res = avlTreeHeight < bsTreeHeight"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "EqualsValueClause",
-      "Info": {
-        "Essentials": [
-          "avlTreeHeight < bsTreeHeight"
-        ],
-        "Extras": []
-      },
-      "Source": "= avlTreeHeight < bsTreeHeight"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "BinaryExpression",
-      "Info": {
-        "Essentials": [
-          "avlTreeHeight",
-          "<",
-          "bsTreeHeight"
-        ],
-        "Extras": []
-      },
-      "Source": "avlTreeHeight < bsTreeHeight"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "IdentifierName",
-      "Info": {
-        "Essentials": [
-          "avlTreeHeight"
-        ],
-        "Extras": []
-      },
-      "Source": "avlTreeHeight "
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "IdentifierName",
-      "Info": {
-        "Essentials": [
-          "bsTreeHeight"
-        ],
-        "Extras": []
-      },
-      "Source": "bsTreeHeight"
-    },
-    {
-      "Kind": 1,
-      "KindStr": "EndBlock",
-      "Declaration": "",
-      "Info": {
-        "Essentials": [
-          "1",
-          "MethodDeclaration"
-        ],
-        "Extras": []
-      },
-      "Source": null
-    },
-    {
-      "Kind": 1,
-      "KindStr": "EndBlock",
-      "Declaration": "",
-      "Info": {
-        "Essentials": [
-          "0",
-          "MethodDeclaration"
-        ],
-        "Extras": []
-      },
-      "Source": null
-    }
-  ]
-}
+{"File":"tests/samples/binexp.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["AVLTreeTest"],"Extras":["public static"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["BinExpExample","void"],"Extras":["public static"]},"Source":"  public static void BinExpExample()\n  {\n    var res = avlTreeHeight < bsTreeHeight;\n  }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["res","var"],"Extras":[]},"Source":"    var res = avlTreeHeight < bsTreeHeight;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:var","name:res"],"Extras":[]},"Source":"    var res = avlTreeHeight < bsTreeHeight"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["var"],"Extras":[]},"Source":"    var "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["res"],"Extras":[]},"Source":"res = avlTreeHeight < bsTreeHeight"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["avlTreeHeight < bsTreeHeight"],"Extras":[]},"Source":"= avlTreeHeight < bsTreeHeight"},{"Kind":0,"KindStr":"Decl","Declaration":"BinaryExpression","Info":{"Essentials":["avlTreeHeight","<","bsTreeHeight"],"Extras":[]},"Source":"avlTreeHeight < bsTreeHeight"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTreeHeight"],"Extras":[]},"Source":"avlTreeHeight "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["bsTreeHeight"],"Extras":[]},"Source":"bsTreeHeight"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/enums.csast b/tests/samples/enums.csast
index e016df7..a37a90d 100644
--- a/tests/samples/enums.csast
+++ b/tests/samples/enums.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/enums.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["EnumDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"EnumDeclaration","Info":{"Essentials":["Compass"],"Extras":[]},"Source":"public enum Compass { North =1 , South, East, West }"},{"Kind":0,"KindStr":"Decl","Declaration":"EnumMemberDeclaration","Info":{"Essentials":["North"],"Extras":[]},"Source":"North =1 "},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["1"],"Extras":[]},"Source":"=1 "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1 "},{"Kind":0,"KindStr":"Decl","Declaration":"EnumMemberDeclaration","Info":{"Essentials":["South"],"Extras":[]},"Source":"South"},{"Kind":0,"KindStr":"Decl","Declaration":"EnumMemberDeclaration","Info":{"Essentials":["East"],"Extras":[]},"Source":"East"},{"Kind":0,"KindStr":"Decl","Declaration":"EnumMemberDeclaration","Info":{"Essentials":["West"],"Extras":[]},"Source":"West "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","EnumDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/enums.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["EnumDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"EnumDeclaration","Info":{"Essentials":["Compass"],"Extras":[]},"Source":"public enum Compass { North =1 , South, East, West }"},{"Kind":0,"KindStr":"Decl","Declaration":"EnumMemberDeclaration","Info":{"Essentials":["North"],"Extras":[]},"Source":"North =1 "},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["1"],"Extras":[]},"Source":"=1 "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1 "},{"Kind":0,"KindStr":"Decl","Declaration":"EnumMemberDeclaration","Info":{"Essentials":["South"],"Extras":[]},"Source":"South"},{"Kind":0,"KindStr":"Decl","Declaration":"EnumMemberDeclaration","Info":{"Essentials":["East"],"Extras":[]},"Source":"East"},{"Kind":0,"KindStr":"Decl","Declaration":"EnumMemberDeclaration","Info":{"Essentials":["West"],"Extras":[]},"Source":"West "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","EnumDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/justClass.csast b/tests/samples/justClass.csast
index 76648f9..a64c7e9 100644
--- a/tests/samples/justClass.csast
+++ b/tests/samples/justClass.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/justClass.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["justClass"],"Extras":[""]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ClassDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/justClass.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["justClass"],"Extras":[""]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ClassDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/many_namespaces.csast b/tests/samples/many_namespaces.csast
index 56ce9ad..215089e 100644
--- a/tests/samples/many_namespaces.csast
+++ b/tests/samples/many_namespaces.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/many_namespaces.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":"MyNamespace\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["Nested"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Nested"],"Extras":[]},"Source":"Nested "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","NamespaceDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","NamespaceDeclaration"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["MyNamespace2"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["MyNamespace2"],"Extras":[]},"Source":"MyNamespace2\n"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","NamespaceDeclaration"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":"MyNamespace "},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["Again"],"Extras":[""]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ClassDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ClassDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/many_namespaces.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":"MyNamespace\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["Nested"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Nested"],"Extras":[]},"Source":"Nested "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","NamespaceDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","NamespaceDeclaration"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["MyNamespace2"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["MyNamespace2"],"Extras":[]},"Source":"MyNamespace2\n"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","NamespaceDeclaration"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":"MyNamespace "},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["Again"],"Extras":[""]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ClassDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ClassDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/one_namespace.csast b/tests/samples/one_namespace.csast
index c5874fd..9846435 100644
--- a/tests/samples/one_namespace.csast
+++ b/tests/samples/one_namespace.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/one_namespace.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":"MyNamespace\n"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","NamespaceDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/one_namespace.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["MyNamespace"],"Extras":[]},"Source":"MyNamespace\n"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","NamespaceDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample1.csast b/tests/samples/sample1.csast
index 05741b4..6544686 100644
--- a/tests/samples/sample1.csast
+++ b/tests/samples/sample1.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample1.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System.IO"],"Extras":[]},"Source":"using System.IO;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["System.IO"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["IO"],"Extras":[]},"Source":"IO"},{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System"],"Extras":[]},"Source":"using System;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["Hi"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["hello","void"],"Extras":["public static"]},"Source":"    public static void hello() {\n        Console.WriteLine(\"Hello1\");\n        Console.WriteLine(\"Hello2\");\n    }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"() "},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"        Console.WriteLine(\"Hello1\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Console.WriteLine"],"Extras":[]},"Source":"        Console.WriteLine(\"Hello1\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["WriteLine","Console"],"Extras":[]},"Source":"        Console.WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Console"],"Extras":[]},"Source":"        Console"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["WriteLine"],"Extras":[]},"Source":"WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["\"Hello1\""],"Extras":[]},"Source":"(\"Hello1\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Hello1\""],"Extras":[]},"Source":"\"Hello1\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Hello1\""],"Extras":[]},"Source":"\"Hello1\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"        Console.WriteLine(\"Hello2\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Console.WriteLine"],"Extras":[]},"Source":"        Console.WriteLine(\"Hello2\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["WriteLine","Console"],"Extras":[]},"Source":"        Console.WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Console"],"Extras":[]},"Source":"        Console"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["WriteLine"],"Extras":[]},"Source":"WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["\"Hello2\""],"Extras":[]},"Source":"(\"Hello2\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Hello2\""],"Extras":[]},"Source":"\"Hello2\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Hello2\""],"Extras":[]},"Source":"\"Hello2\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["Second"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["nextNum","void"],"Extras":[""]},"Source":"    void nextNum(FileInfo c, ref int seven) {}\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"    void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["FileInfo c, ref int seven"],"Extras":[]},"Source":"(FileInfo c, ref int seven) "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["c","FileInfo "],"Extras":[]},"Source":"FileInfo c"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["FileInfo"],"Extras":[]},"Source":"FileInfo "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["seven","int "],"Extras":["ref"]},"Source":"ref int seven"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["nextNum","int"],"Extras":["static"]},"Source":"    static int nextNum(FileInfo c, int seven) {\n        return 1;\n    }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["FileInfo c, int seven"],"Extras":[]},"Source":"(FileInfo c, int seven) "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["c","FileInfo "],"Extras":[]},"Source":"FileInfo c"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["FileInfo"],"Extras":[]},"Source":"FileInfo "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["seven","int "],"Extras":[]},"Source":"int seven"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":0,"KindStr":"Decl","Declaration":"ReturnStatement","Info":{"Essentials":["1"],"Extras":[]},"Source":"        return 1;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/sample1.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System.IO"],"Extras":[]},"Source":"using System.IO;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["System.IO"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["IO"],"Extras":[]},"Source":"IO"},{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System"],"Extras":[]},"Source":"using System;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["Hi"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["hello","void"],"Extras":["public static"]},"Source":"    public static void hello() {\n        Console.WriteLine(\"Hello1\");\n        Console.WriteLine(\"Hello2\");\n    }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"() "},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"        Console.WriteLine(\"Hello1\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Console.WriteLine"],"Extras":[]},"Source":"        Console.WriteLine(\"Hello1\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["WriteLine","Console"],"Extras":[]},"Source":"        Console.WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Console"],"Extras":[]},"Source":"        Console"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["WriteLine"],"Extras":[]},"Source":"WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["\"Hello1\""],"Extras":[]},"Source":"(\"Hello1\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Hello1\""],"Extras":[]},"Source":"\"Hello1\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Hello1\""],"Extras":[]},"Source":"\"Hello1\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"        Console.WriteLine(\"Hello2\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Console.WriteLine"],"Extras":[]},"Source":"        Console.WriteLine(\"Hello2\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["WriteLine","Console"],"Extras":[]},"Source":"        Console.WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Console"],"Extras":[]},"Source":"        Console"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["WriteLine"],"Extras":[]},"Source":"WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["\"Hello2\""],"Extras":[]},"Source":"(\"Hello2\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Hello2\""],"Extras":[]},"Source":"\"Hello2\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Hello2\""],"Extras":[]},"Source":"\"Hello2\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["Second"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["nextNum","void"],"Extras":[""]},"Source":"    void nextNum(FileInfo c, ref int seven) {}\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"    void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["FileInfo c, ref int seven"],"Extras":[]},"Source":"(FileInfo c, ref int seven) "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["c","FileInfo "],"Extras":[]},"Source":"FileInfo c"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["FileInfo"],"Extras":[]},"Source":"FileInfo "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["seven","int "],"Extras":["ref"]},"Source":"ref int seven"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["nextNum","int"],"Extras":["static"]},"Source":"    static int nextNum(FileInfo c, int seven) {\n        return 1;\n    }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["FileInfo c, int seven"],"Extras":[]},"Source":"(FileInfo c, int seven) "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["c","FileInfo "],"Extras":[]},"Source":"FileInfo c"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["FileInfo"],"Extras":[]},"Source":"FileInfo "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["seven","int "],"Extras":[]},"Source":"int seven"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":0,"KindStr":"Decl","Declaration":"ReturnStatement","Info":{"Essentials":["1"],"Extras":[]},"Source":"        return 1;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample10.csast b/tests/samples/sample10.csast
index 0050d01..7ea540f 100644
--- a/tests/samples/sample10.csast
+++ b/tests/samples/sample10.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample10.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["A"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["assign","int"],"Extras":[""]},"Source":"  int assign()\n  {\n    var a = 2;\n    return a;\n  }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"  int "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["a","var"],"Extras":[]},"Source":"    var a = 2;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:var","name:a"],"Extras":[]},"Source":"    var a = 2"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["var"],"Extras":[]},"Source":"    var "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["a"],"Extras":[]},"Source":"a = 2"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["2"],"Extras":[]},"Source":"= 2"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"ReturnStatement","Info":{"Essentials":["a"],"Extras":[]},"Source":"    return a;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["a"],"Extras":[]},"Source":"a"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/sample10.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["A"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["assign","int"],"Extras":[""]},"Source":"  int assign()\n  {\n    var a = 2;\n    return a;\n  }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"  int "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["a","var"],"Extras":[]},"Source":"    var a = 2;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:var","name:a"],"Extras":[]},"Source":"    var a = 2"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["var"],"Extras":[]},"Source":"    var "},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["a"],"Extras":[]},"Source":"a = 2"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["2"],"Extras":[]},"Source":"= 2"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"ReturnStatement","Info":{"Essentials":["a"],"Extras":[]},"Source":"    return a;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["a"],"Extras":[]},"Source":"a"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample11.csast b/tests/samples/sample11.csast
index fdd9564..87675b4 100644
--- a/tests/samples/sample11.csast
+++ b/tests/samples/sample11.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample11.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["AVLTreeTest"],"Extras":["public static"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["DoTest","void"],"Extras":["public static"]},"Source":"  [Fact]\n  public static void DoTest()\n  {\n    AVLTree<int> avlTree = new AVLTree<int>();\n    avlTree.Insert(4); // insert\n    AssertCase_2(avlTree);\n  }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Fact"],"Extras":[]},"Source":"Fact"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["avlTree","AVLTree<int>"],"Extras":[]},"Source":"    AVLTree<int> avlTree = new AVLTree<int>();\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:AVLTree<int>","name:avlTree"],"Extras":[]},"Source":"    AVLTree<int> avlTree = new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"    AVLTree<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree = new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["new AVLTree<int>()"],"Extras":[]},"Source":"= new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["AVLTree<int>"],"Extras":[]},"Source":"new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"AVLTree<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"()"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"    avlTree.Insert(4); // insert\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"    avlTree.Insert(4)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"    avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"    avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["4"],"Extras":[]},"Source":"(4)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["4"],"Extras":[]},"Source":"4"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["4"],"Extras":[]},"Source":"4"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"    AssertCase_2(avlTree);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["AssertCase_2"],"Extras":[]},"Source":"    AssertCase_2(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["AssertCase_2"],"Extras":[]},"Source":"    AssertCase_2"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ExpressionStatement"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/sample11.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["AVLTreeTest"],"Extras":["public static"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["DoTest","void"],"Extras":["public static"]},"Source":"  [Fact]\n  public static void DoTest()\n  {\n    AVLTree<int> avlTree = new AVLTree<int>();\n    avlTree.Insert(4); \n    AssertCase_2(avlTree);\n  }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Fact"],"Extras":[]},"Source":"Fact"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["avlTree","AVLTree<int>"],"Extras":[]},"Source":"    AVLTree<int> avlTree = new AVLTree<int>();\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:AVLTree<int>","name:avlTree"],"Extras":[]},"Source":"    AVLTree<int> avlTree = new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"    AVLTree<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree = new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["new AVLTree<int>()"],"Extras":[]},"Source":"= new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["AVLTree<int>"],"Extras":[]},"Source":"new AVLTree<int>()"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","AVLTree","<int>","int"],"Extras":[]},"Source":"AVLTree<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"()"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"    avlTree.Insert(4); \n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["avlTree.Insert"],"Extras":[]},"Source":"    avlTree.Insert(4)"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["Insert","avlTree"],"Extras":[]},"Source":"    avlTree.Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"    avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Insert"],"Extras":[]},"Source":"Insert"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["4"],"Extras":[]},"Source":"(4)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["4"],"Extras":[]},"Source":"4"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["4"],"Extras":[]},"Source":"4"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"    AssertCase_2(avlTree);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["AssertCase_2"],"Extras":[]},"Source":"    AssertCase_2(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["AssertCase_2"],"Extras":[]},"Source":"    AssertCase_2"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"(avlTree)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["avlTree"],"Extras":[]},"Source":"avlTree"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ExpressionStatement"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample12.csast b/tests/samples/sample12.csast
index e3a1392..d52de46 100644
--- a/tests/samples/sample12.csast
+++ b/tests/samples/sample12.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample12.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["AVLTreeTest"],"Extras":["public static"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["DoTest","void"],"Extras":["public static"]},"Source":"  public static void DoTest()\n  {\n    List<int> treeDataList = new List<int>() { 15, 25, -5 };\n  }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["treeDataList","List<int>"],"Extras":[]},"Source":"    List<int> treeDataList = new List<int>() { 15, 25, -5 };\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:List<int>","name:treeDataList"],"Extras":[]},"Source":"    List<int> treeDataList = new List<int>() { 15, 25, -5 }"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","List","<int>","int"],"Extras":[]},"Source":"    List<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"treeDataList = new List<int>() { 15, 25, -5 }"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["new List<int>() { 15, 25, -5 }"],"Extras":[]},"Source":"= new List<int>() { 15, 25, -5 }"},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["List<int>"],"Extras":[]},"Source":"new List<int>() { 15, 25, -5 }"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","List","<int>","int"],"Extras":[]},"Source":"List<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"() "},{"Kind":0,"KindStr":"Decl","Declaration":"InitializerExpression","Info":{"Essentials":["3","15, 25, -5"],"Extras":[]},"Source":"{ 15, 25, -5 }"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["15"],"Extras":[]},"Source":"15"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["25"],"Extras":[]},"Source":"25"},{"Kind":0,"KindStr":"Decl","Declaration":"PrefixUnaryExpression","Info":{"Essentials":["-","5"],"Extras":[]},"Source":"-5 "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["5"],"Extras":[]},"Source":"5 "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/sample12.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["AVLTreeTest"],"Extras":["public static"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["DoTest","void"],"Extras":["public static"]},"Source":"  public static void DoTest()\n  {\n    List<int> treeDataList = new List<int>() { 15, 25, -5 };\n  }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LocalDeclarationStatement","Info":{"Essentials":["treeDataList","List<int>"],"Extras":[]},"Source":"    List<int> treeDataList = new List<int>() { 15, 25, -5 };\n"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclaration","Info":{"Essentials":["type:List<int>","name:treeDataList"],"Extras":[]},"Source":"    List<int> treeDataList = new List<int>() { 15, 25, -5 }"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","List","<int>","int"],"Extras":[]},"Source":"    List<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int> "},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"VariableDeclarator","Info":{"Essentials":["treeDataList"],"Extras":[]},"Source":"treeDataList = new List<int>() { 15, 25, -5 }"},{"Kind":0,"KindStr":"Decl","Declaration":"EqualsValueClause","Info":{"Essentials":["new List<int>() { 15, 25, -5 }"],"Extras":[]},"Source":"= new List<int>() { 15, 25, -5 }"},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["List<int>"],"Extras":[]},"Source":"new List<int>() { 15, 25, -5 }"},{"Kind":0,"KindStr":"Decl","Declaration":"GenericName","Info":{"Essentials":["1","List","<int>","int"],"Extras":[]},"Source":"List<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"TypeArgumentList","Info":{"Essentials":["int"],"Extras":[]},"Source":"<int>"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"() "},{"Kind":0,"KindStr":"Decl","Declaration":"InitializerExpression","Info":{"Essentials":["3","15, 25, -5"],"Extras":[]},"Source":"{ 15, 25, -5 }"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["15"],"Extras":[]},"Source":"15"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["25"],"Extras":[]},"Source":"25"},{"Kind":0,"KindStr":"Decl","Declaration":"PrefixUnaryExpression","Info":{"Essentials":["-","5"],"Extras":[]},"Source":"-5 "},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["5"],"Extras":[]},"Source":"5 "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample2.csast b/tests/samples/sample2.csast
index 2214f27..345afec 100644
--- a/tests/samples/sample2.csast
+++ b/tests/samples/sample2.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample2.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["A"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["hi","int"],"Extras":[""]},"Source":"    int hi(string arg) {\n        return 1;\n    }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"    int "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["string arg"],"Extras":[]},"Source":"(string arg) "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["arg","string "],"Extras":[]},"Source":"string arg"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["string"],"Extras":[]},"Source":"string "},{"Kind":0,"KindStr":"Decl","Declaration":"ReturnStatement","Info":{"Essentials":["1"],"Extras":[]},"Source":"        return 1;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/sample2.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["A"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["hi","int"],"Extras":[""]},"Source":"    int hi(string arg) {\n        return 1;\n    }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"    int "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["string arg"],"Extras":[]},"Source":"(string arg) "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["arg","string "],"Extras":[]},"Source":"string arg"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["string"],"Extras":[]},"Source":"string "},{"Kind":0,"KindStr":"Decl","Declaration":"ReturnStatement","Info":{"Essentials":["1"],"Extras":[]},"Source":"        return 1;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample3.csast b/tests/samples/sample3.csast
index 4082468..80a6828 100644
--- a/tests/samples/sample3.csast
+++ b/tests/samples/sample3.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample3.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["A"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["hi","void"],"Extras":[""]},"Source":"    void hi() {}\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"    void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"() "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/sample3.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["A"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["hi","void"],"Extras":[""]},"Source":"    void hi() {}\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"    void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"() "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample4.csast b/tests/samples/sample4.csast
index d3a9c52..2e90d39 100644
--- a/tests/samples/sample4.csast
+++ b/tests/samples/sample4.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample4.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["Microsoft.Win32.SafeHandles"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["Microsoft.Win32.SafeHandles"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["Microsoft.Win32"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Microsoft"],"Extras":[]},"Source":"Microsoft"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Win32"],"Extras":[]},"Source":"Win32"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["SafeHandles"],"Extras":[]},"Source":"SafeHandles\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["CriticalHandleMinusOneIsInvalid","CriticalHandle, IAmAlsoHere"],"Extras":["public abstract"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BaseList","Info":{"Essentials":["CriticalHandle, IAmAlsoHere"],"Extras":[]},"Source":": CriticalHandle, IAmAlsoHere\n"},{"Kind":0,"KindStr":"Decl","Declaration":"SimpleBaseType","Info":{"Essentials":["CriticalHandle"],"Extras":[]},"Source":"CriticalHandle"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["CriticalHandle"],"Extras":[]},"Source":"CriticalHandle"},{"Kind":0,"KindStr":"Decl","Declaration":"SimpleBaseType","Info":{"Essentials":["IAmAlsoHere"],"Extras":[]},"Source":"IAmAlsoHere\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["IAmAlsoHere"],"Extras":[]},"Source":"IAmAlsoHere\n"},{"Kind":0,"KindStr":"Decl","Declaration":"ConstructorDeclaration","Info":{"Essentials":["CriticalHandleMinusOneIsInvalid"],"Extras":[]},"Source":"    protected CriticalHandleMinusOneIsInvalid(); // ctor\n"},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ClassDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ClassDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/sample4.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["Microsoft.Win32.SafeHandles"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["Microsoft.Win32.SafeHandles"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["Microsoft.Win32"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Microsoft"],"Extras":[]},"Source":"Microsoft"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Win32"],"Extras":[]},"Source":"Win32"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["SafeHandles"],"Extras":[]},"Source":"SafeHandles\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["CriticalHandleMinusOneIsInvalid","CriticalHandle, IAmAlsoHere"],"Extras":["public abstract"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BaseList","Info":{"Essentials":["CriticalHandle, IAmAlsoHere"],"Extras":[]},"Source":": CriticalHandle, IAmAlsoHere\n"},{"Kind":0,"KindStr":"Decl","Declaration":"SimpleBaseType","Info":{"Essentials":["CriticalHandle"],"Extras":[]},"Source":"CriticalHandle"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["CriticalHandle"],"Extras":[]},"Source":"CriticalHandle"},{"Kind":0,"KindStr":"Decl","Declaration":"SimpleBaseType","Info":{"Essentials":["IAmAlsoHere"],"Extras":[]},"Source":"IAmAlsoHere\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["IAmAlsoHere"],"Extras":[]},"Source":"IAmAlsoHere\n"},{"Kind":0,"KindStr":"Decl","Declaration":"ConstructorDeclaration","Info":{"Essentials":["CriticalHandleMinusOneIsInvalid"],"Extras":[]},"Source":"    protected CriticalHandleMinusOneIsInvalid(); \n"},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ClassDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ClassDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample5.csast b/tests/samples/sample5.csast
index 0b3632d..1e9ab1a 100644
--- a/tests/samples/sample5.csast
+++ b/tests/samples/sample5.csast
@@ -1,218 +1 @@
-{
-  "File": "../cs2nim/tests/samples/sample5.cs",
-  "Lines": [
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "BlockStarts",
-      "Info": {
-        "Essentials": [
-          "1"
-        ],
-        "Extras": [
-          "ClassDeclaration"
-        ]
-      },
-      "Source": null
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "ClassDeclaration",
-      "Info": {
-        "Essentials": [
-          "Array"
-        ],
-        "Extras": [
-          "public abstract"
-        ]
-      },
-      "Source": null
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "IndexerDeclaration",
-      "Info": {
-        "Essentials": [
-          "System.Collections.IList.",
-          "[int index]",
-          "{ get; set; }",
-          ""
-        ],
-        "Extras": []
-      },
-      "Source": "  object System.Collections.IList.this[int index] { get; set; }\n"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "PredefinedType",
-      "Info": {
-        "Essentials": [
-          "object"
-        ],
-        "Extras": []
-      },
-      "Source": "  object "
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "ExplicitInterfaceSpecifier",
-      "Info": {
-        "Essentials": [
-          "System.Collections.IList"
-        ],
-        "Extras": []
-      },
-      "Source": "System.Collections.IList."
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "QualifiedName",
-      "Info": {
-        "Essentials": [
-          "System.Collections.IList"
-        ],
-        "Extras": []
-      },
-      "Source": null
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "QualifiedName",
-      "Info": {
-        "Essentials": [
-          "System.Collections"
-        ],
-        "Extras": []
-      },
-      "Source": null
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "IdentifierName",
-      "Info": {
-        "Essentials": [
-          "System"
-        ],
-        "Extras": []
-      },
-      "Source": "System"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "IdentifierName",
-      "Info": {
-        "Essentials": [
-          "Collections"
-        ],
-        "Extras": []
-      },
-      "Source": "Collections"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "IdentifierName",
-      "Info": {
-        "Essentials": [
-          "IList"
-        ],
-        "Extras": []
-      },
-      "Source": "IList"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "BracketedParameterList",
-      "Info": {
-        "Essentials": [
-          "int index"
-        ],
-        "Extras": []
-      },
-      "Source": "[int index] "
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "Parameter",
-      "Info": {
-        "Essentials": [
-          "index",
-          "int "
-        ],
-        "Extras": []
-      },
-      "Source": "int index"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "PredefinedType",
-      "Info": {
-        "Essentials": [
-          "int"
-        ],
-        "Extras": []
-      },
-      "Source": "int "
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "AccessorList",
-      "Info": {
-        "Essentials": [
-          "get; set;"
-        ],
-        "Extras": []
-      },
-      "Source": "{ get; set; }\n"
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "AccessorDeclaration",
-      "Info": {
-        "Essentials": [
-          "get"
-        ],
-        "Extras": []
-      },
-      "Source": "get; "
-    },
-    {
-      "Kind": 0,
-      "KindStr": "Decl",
-      "Declaration": "AccessorDeclaration",
-      "Info": {
-        "Essentials": [
-          "set"
-        ],
-        "Extras": []
-      },
-      "Source": "set; "
-    },
-    {
-      "Kind": 1,
-      "KindStr": "EndBlock",
-      "Declaration": "",
-      "Info": {
-        "Essentials": [
-          "0",
-          "ClassDeclaration"
-        ],
-        "Extras": []
-      },
-      "Source": null
-    }
-  ]
-}
+{"File":"tests/samples/sample5.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["Array"],"Extras":["public abstract"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IndexerDeclaration","Info":{"Essentials":["System.Collections.IList.","[int index]","{ get; set; }",""],"Extras":[]},"Source":"  object System.Collections.IList.this[int index] { get; set; }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["object"],"Extras":[]},"Source":"  object "},{"Kind":0,"KindStr":"Decl","Declaration":"ExplicitInterfaceSpecifier","Info":{"Essentials":["System.Collections.IList"],"Extras":[]},"Source":"System.Collections.IList."},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["System.Collections.IList"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["System.Collections"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Collections"],"Extras":[]},"Source":"Collections"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["IList"],"Extras":[]},"Source":"IList"},{"Kind":0,"KindStr":"Decl","Declaration":"BracketedParameterList","Info":{"Essentials":["int index"],"Extras":[]},"Source":"[int index] "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["index","int "],"Extras":[]},"Source":"int index"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":0,"KindStr":"Decl","Declaration":"AccessorList","Info":{"Essentials":["get; set;"],"Extras":[]},"Source":"{ get; set; }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"AccessorDeclaration","Info":{"Essentials":["get"],"Extras":[]},"Source":"get; "},{"Kind":0,"KindStr":"Decl","Declaration":"AccessorDeclaration","Info":{"Essentials":["set"],"Extras":[]},"Source":"set; "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ClassDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample6.csast b/tests/samples/sample6.csast
index 12e93d8..37fae32 100644
--- a/tests/samples/sample6.csast
+++ b/tests/samples/sample6.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample6.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["A","B"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BaseList","Info":{"Essentials":["B"],"Extras":[]},"Source":": B "},{"Kind":0,"KindStr":"Decl","Declaration":"SimpleBaseType","Info":{"Essentials":["B"],"Extras":[]},"Source":"B "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["B"],"Extras":[]},"Source":"B "},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["PropertyDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"PropertyDeclaration","Info":{"Essentials":["IsInvalid","1"],"Extras":["get"]},"Source":"  public override bool IsInvalid { get; }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["bool"],"Extras":[]},"Source":"bool "},{"Kind":0,"KindStr":"Decl","Declaration":"AccessorList","Info":{"Essentials":["get;"],"Extras":[]},"Source":"{ get; }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"AccessorDeclaration","Info":{"Essentials":["get"],"Extras":[]},"Source":"get; "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","PropertyDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","PropertyDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/sample6.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["A","B"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BaseList","Info":{"Essentials":["B"],"Extras":[]},"Source":": B "},{"Kind":0,"KindStr":"Decl","Declaration":"SimpleBaseType","Info":{"Essentials":["B"],"Extras":[]},"Source":"B "},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["B"],"Extras":[]},"Source":"B "},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["PropertyDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"PropertyDeclaration","Info":{"Essentials":["IsInvalid","1"],"Extras":["get"]},"Source":"  public override bool IsInvalid { get; }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["bool"],"Extras":[]},"Source":"bool "},{"Kind":0,"KindStr":"Decl","Declaration":"AccessorList","Info":{"Essentials":["get;"],"Extras":[]},"Source":"{ get; }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"AccessorDeclaration","Info":{"Essentials":["get"],"Extras":[]},"Source":"get; "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","PropertyDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","PropertyDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample7.csast b/tests/samples/sample7.csast
index 6f6427e..2f92b86 100644
--- a/tests/samples/sample7.csast
+++ b/tests/samples/sample7.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample7.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System.IO"],"Extras":[]},"Source":"using System.IO;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["System.IO"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["IO"],"Extras":[]},"Source":"IO"},{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System"],"Extras":[]},"Source":"using System;"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"}]}
\ No newline at end of file
+{"File":"tests/samples/sample7.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System.IO"],"Extras":[]},"Source":"using System.IO;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"QualifiedName","Info":{"Essentials":["System.IO"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["IO"],"Extras":[]},"Source":"IO"},{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System"],"Extras":[]},"Source":"using System;"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"}]}
\ No newline at end of file
diff --git a/tests/samples/sample8.csast b/tests/samples/sample8.csast
index de05029..dff2959 100644
--- a/tests/samples/sample8.csast
+++ b/tests/samples/sample8.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample8.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["Second"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["nextNum","void"],"Extras":[""]},"Source":"    void nextNum(FileInfo c, ref int seven) {}\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"    void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["FileInfo c, ref int seven"],"Extras":[]},"Source":"(FileInfo c, ref int seven) "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["c","FileInfo "],"Extras":[]},"Source":"FileInfo c"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["FileInfo"],"Extras":[]},"Source":"FileInfo "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["seven","int "],"Extras":["ref"]},"Source":"ref int seven"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["nextNum","int"],"Extras":["static"]},"Source":"    static int nextNum(FileInfo c, int seven) {\n        return 1;\n    }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["FileInfo c, int seven"],"Extras":[]},"Source":"(FileInfo c, int seven) "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["c","FileInfo "],"Extras":[]},"Source":"FileInfo c"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["FileInfo"],"Extras":[]},"Source":"FileInfo "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["seven","int "],"Extras":[]},"Source":"int seven"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":0,"KindStr":"Decl","Declaration":"ReturnStatement","Info":{"Essentials":["1"],"Extras":[]},"Source":"        return 1;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/sample8.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["Second"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["nextNum","void"],"Extras":[""]},"Source":"    void nextNum(FileInfo c, ref int seven) {}\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"    void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["FileInfo c, ref int seven"],"Extras":[]},"Source":"(FileInfo c, ref int seven) "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["c","FileInfo "],"Extras":[]},"Source":"FileInfo c"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["FileInfo"],"Extras":[]},"Source":"FileInfo "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["seven","int "],"Extras":["ref"]},"Source":"ref int seven"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["nextNum","int"],"Extras":["static"]},"Source":"    static int nextNum(FileInfo c, int seven) {\n        return 1;\n    }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":["FileInfo c, int seven"],"Extras":[]},"Source":"(FileInfo c, int seven) "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["c","FileInfo "],"Extras":[]},"Source":"FileInfo c"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["FileInfo"],"Extras":[]},"Source":"FileInfo "},{"Kind":0,"KindStr":"Decl","Declaration":"Parameter","Info":{"Essentials":["seven","int "],"Extras":[]},"Source":"int seven"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["int"],"Extras":[]},"Source":"int "},{"Kind":0,"KindStr":"Decl","Declaration":"ReturnStatement","Info":{"Essentials":["1"],"Extras":[]},"Source":"        return 1;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["1"],"Extras":[]},"Source":"1"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/sample9.csast b/tests/samples/sample9.csast
index e9233b9..7abe143 100644
--- a/tests/samples/sample9.csast
+++ b/tests/samples/sample9.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/sample9.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["A"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["hi","void"],"Extras":[""]},"Source":"  void hi()\n  {\n    Console.WriteLine(\"Hello World!\");\n    FunctionCall(\"arg1\", 2);\n  }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"  void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"    Console.WriteLine(\"Hello World!\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Console.WriteLine"],"Extras":[]},"Source":"    Console.WriteLine(\"Hello World!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["WriteLine","Console"],"Extras":[]},"Source":"    Console.WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Console"],"Extras":[]},"Source":"    Console"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["WriteLine"],"Extras":[]},"Source":"WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["\"Hello World!\""],"Extras":[]},"Source":"(\"Hello World!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Hello World!\""],"Extras":[]},"Source":"\"Hello World!\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Hello World!\""],"Extras":[]},"Source":"\"Hello World!\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"    FunctionCall(\"arg1\", 2);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["FunctionCall"],"Extras":[]},"Source":"    FunctionCall(\"arg1\", 2)"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["FunctionCall"],"Extras":[]},"Source":"    FunctionCall"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["\"arg1\", 2"],"Extras":[]},"Source":"(\"arg1\", 2)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"arg1\""],"Extras":[]},"Source":"\"arg1\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"arg1\""],"Extras":[]},"Source":"\"arg1\""},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ExpressionStatement"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/sample9.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["A"],"Extras":[""]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["hi","void"],"Extras":[""]},"Source":"  void hi()\n  {\n    Console.WriteLine(\"Hello World!\");\n    FunctionCall(\"arg1\", 2);\n  }\n"},{"Kind":0,"KindStr":"Decl","Declaration":"PredefinedType","Info":{"Essentials":["void"],"Extras":[]},"Source":"  void "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"    Console.WriteLine(\"Hello World!\");\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["Console.WriteLine"],"Extras":[]},"Source":"    Console.WriteLine(\"Hello World!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"MemberAccessExpression","Info":{"Essentials":["WriteLine","Console"],"Extras":[]},"Source":"    Console.WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Console"],"Extras":[]},"Source":"    Console"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["WriteLine"],"Extras":[]},"Source":"WriteLine"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["\"Hello World!\""],"Extras":[]},"Source":"(\"Hello World!\")"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"Hello World!\""],"Extras":[]},"Source":"\"Hello World!\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"Hello World!\""],"Extras":[]},"Source":"\"Hello World!\""},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["ExpressionStatement"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ExpressionStatement","Info":null,"Source":"    FunctionCall(\"arg1\", 2);\n"},{"Kind":0,"KindStr":"Decl","Declaration":"InvocationExpression","Info":{"Essentials":["FunctionCall"],"Extras":[]},"Source":"    FunctionCall(\"arg1\", 2)"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["FunctionCall"],"Extras":[]},"Source":"    FunctionCall"},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":["\"arg1\", 2"],"Extras":[]},"Source":"(\"arg1\", 2)"},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["\"arg1\""],"Extras":[]},"Source":"\"arg1\""},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["\"arg1\""],"Extras":[]},"Source":"\"arg1\""},{"Kind":0,"KindStr":"Decl","Declaration":"Argument","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":0,"KindStr":"Decl","Declaration":"LiteralExpression","Info":{"Essentials":["2"],"Extras":[]},"Source":"2"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","ExpressionStatement"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","ExpressionStatement"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/samples/xwtButtonTests.csast b/tests/samples/xwtButtonTests.csast
index 206ee3e..01d0bb2 100644
--- a/tests/samples/xwtButtonTests.csast
+++ b/tests/samples/xwtButtonTests.csast
@@ -1 +1 @@
-{"File":"../cs2nim/tests/samples/xwtButtonTests.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System"],"Extras":[]},"Source":"using System;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["Xwt"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Xwt"],"Extras":[]},"Source":"Xwt\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["ButtonTests","WidgetTests"],"Extras":["public"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BaseList","Info":{"Essentials":["WidgetTests"],"Extras":[]},"Source":": WidgetTests\n"},{"Kind":0,"KindStr":"Decl","Declaration":"SimpleBaseType","Info":{"Essentials":["WidgetTests"],"Extras":[]},"Source":"WidgetTests\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["WidgetTests"],"Extras":[]},"Source":"WidgetTests\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["CreateWidget","Widget"],"Extras":["public override"]},"Source":"\t\tpublic override Widget CreateWidget ()\n\t\t{\n\t\t\treturn new Button ();\n\t\t}\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Widget"],"Extras":[]},"Source":"Widget "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"ReturnStatement","Info":{"Essentials":["new Button ()"],"Extras":[]},"Source":"\t\t\treturn new Button ();\n"},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["Button"],"Extras":[]},"Source":"new Button ()"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Button"],"Extras":[]},"Source":"Button "},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"()"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
+{"File":"tests/samples/xwtButtonTests.cs","Lines":[{"Kind":0,"KindStr":"Decl","Declaration":"UsingDirective","Info":{"Essentials":["System"],"Extras":[]},"Source":"using System;\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["System"],"Extras":[]},"Source":"System"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["1"],"Extras":["NamespaceDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"NamespaceDeclaration","Info":{"Essentials":["Xwt"],"Extras":[]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Xwt"],"Extras":[]},"Source":"Xwt\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["2"],"Extras":["ClassDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"ClassDeclaration","Info":{"Essentials":["ButtonTests","WidgetTests"],"Extras":["public"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"BaseList","Info":{"Essentials":["WidgetTests"],"Extras":[]},"Source":": WidgetTests\n"},{"Kind":0,"KindStr":"Decl","Declaration":"SimpleBaseType","Info":{"Essentials":["WidgetTests"],"Extras":[]},"Source":"WidgetTests\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["WidgetTests"],"Extras":[]},"Source":"WidgetTests\n"},{"Kind":0,"KindStr":"Decl","Declaration":"BlockStarts","Info":{"Essentials":["3"],"Extras":["MethodDeclaration"]},"Source":null},{"Kind":0,"KindStr":"Decl","Declaration":"MethodDeclaration","Info":{"Essentials":["CreateWidget","Widget"],"Extras":["public override"]},"Source":"\t\tpublic override Widget CreateWidget ()\n\t\t{\n\t\t\treturn new Button ();\n\t\t}\n"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Widget"],"Extras":[]},"Source":"Widget "},{"Kind":0,"KindStr":"Decl","Declaration":"ParameterList","Info":{"Essentials":[""],"Extras":[]},"Source":"()\n"},{"Kind":0,"KindStr":"Decl","Declaration":"ReturnStatement","Info":{"Essentials":["new Button ()"],"Extras":[]},"Source":"\t\t\treturn new Button ();\n"},{"Kind":0,"KindStr":"Decl","Declaration":"ObjectCreationExpression","Info":{"Essentials":["Button"],"Extras":[]},"Source":"new Button ()"},{"Kind":0,"KindStr":"Decl","Declaration":"IdentifierName","Info":{"Essentials":["Button"],"Extras":[]},"Source":"Button "},{"Kind":0,"KindStr":"Decl","Declaration":"ArgumentList","Info":{"Essentials":[""],"Extras":[]},"Source":"()"},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["2","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["1","MethodDeclaration"],"Extras":[]},"Source":null},{"Kind":1,"KindStr":"EndBlock","Declaration":"","Info":{"Essentials":["0","MethodDeclaration"],"Extras":[]},"Source":null}]}
\ No newline at end of file
diff --git a/tests/tgen_tests.nim b/tests/tgen_tests.nim
index ac420e3..9518dd5 100644
--- a/tests/tgen_tests.nim
+++ b/tests/tgen_tests.nim
@@ -6,23 +6,23 @@ const last = false
 suite "code generation tests":
   when not last:
   # these should work:
-    test "1. enums":
+    test "01. enums":
       check genTest("enums")
-    test "2. a minimal class":
+    test "02. a minimal class":
       check genTest("justClass")
-    test "3. sample3":
+    test "03. sample3":
       check genTest("sample3")
-    test "4. sample2":
+    test "04. sample2":
       check genTest("sample2")
-    test "5. sample4":
+    test "05. sample4":
       check genTest("sample4")
-    test "6. sample5":
+    test "06. sample5":
       check genTest("sample5")
-    test "7. sample6":
+    test "07. sample6":
       check genTest("sample6")
-    test "8. sample8":
+    test "08. sample8":
       check genTest("sample8")
-    test "9. sample7":
+    test "09. sample7":
       check genTest("sample7")
     test "10. sample1":
       check genTest("sample1")
@@ -36,10 +36,11 @@ suite "code generation tests":
       check genTest("sample12")
     test "15. binary expression":
       check genTest("binexp")
-    echo "OK total: 15"
+    # echo "OK total: 15"
   #[
   ]#
   # when true:
+    # discard
     # working on it:
   # when false: # not ready yet.
   #   discard
diff --git a/type_creator.nim b/type_creator.nim
index da3c459..4545e09 100644
--- a/type_creator.nim
+++ b/type_creator.nim
@@ -24,707 +24,707 @@ proc createType*(info: Info; id: UUID; data: AllNeededData): Construct =
     if data.currentNamespace.name != "default":
       # modifyNameToGlobal:
       a.name = data.currentNamespace.name & "." & a.name
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckNamespace, namespace: a)
   of "ClassDeclaration":
     var a = extract(CsClass, info, data)
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckClass, class: a)
     # Construct(t: ckNamespace, namespace: a) #.wrap(ckNamespace)
   of "MethodDeclaration":
     var a = extract(CsMethod, info, data)
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckMethod, cmethod: a)
   # still unsupported
   of "PredefinedType":
     var a = extract(CsPredefinedType, info, data)
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckPredefinedType, predefinedType: a)
   of "ParameterList":
     var a = extract(CsParameterList, info,data)
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind:ckParameterList, parameterlist: a)
   of "LocalDeclarationStatement":
     var a = extract(CsLocalDeclarationStatement, info,data)
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckLocalDeclarationStatement, localDeclarationStatement: a)
   of "EnumDeclaration":
     var a = extract(CsEnum, info)
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckEnum, cenum: a)
   of "EnumMemberDeclaration":
     var a = extract(CsEnumMember, info)
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckEnumMember, enumMember: a)
   of "EqualsValueClause": # assignment.
     var a = extract(CsEqualsValueClause, info) #, data);
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckEqualsValueClause, equalsValueClause: a)
 
   of "LiteralExpression":
     var a = extract(CsLiteralExpression, info) #, data);
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckLiteralExpression, literalExpression: a)
   of "IdentifierName":discard
   of "Parameter":
     var a = extract(CsParameter, info) #, data);
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckParameter, parameter: a)
 
   # ## some regex magic
   of "ArgumentList":
       var a = extract(CsArgumentList, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckArgumentList, argumentList: a)
   of "ObjectCreationExpression":
       var a = extract(CsObjectCreationExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckObjectCreationExpression, objectCreationExpression: a)
   of "UsingDirective":
       var a = extract(CsUsingDirective, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckUsingDirective, usingDirective: a)
   of "Indexer":
       var a = extract(CsIndexer, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckIndexer, indexer: a)
 
   of "Argument":
       var a = extract(CsArgument, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckArgument, argument: a)
   of "Constructor":
       var a = extract(CsConstructor, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckConstructor, constructor: a)
   of "ReturnStatement":
       var a = extract(CsReturnStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckReturnStatement, returnStatement: a)
   of "SimpleBaseType":
       var a = extract(CsSimpleBaseType, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckSimpleBaseType, simpleBaseType: a)
   of "BaseList":
       var a = extract(CsBaseList, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckBaseList, baseList: a)
   of "Property":
       var a = extract(CsProperty, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckProperty, property: a)
   of "ExplicitInterfaceSpecifier":
       var a = extract(CsExplicitInterfaceSpecifier, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckExplicitInterfaceSpecifier, explicitInterfaceSpecifier: a)
   of "ExpressionStatement":
       var a = extract(CsExpressionStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckExpressionStatement, expressionStatement: a)
   of "InvocationExpression":
       var a = extract(CsInvocationExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckInvocationExpression, invocationExpression: a)
 
   of "BinaryExpression":
       var a = extract(CsBinaryExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckBinaryExpression, binaryExpression: a)
   of "AssignmentExpression":
       var a = extract(CsAssignmentExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckAssignmentExpression, assignmentExpression: a)
   of "IfStatement":
       var a = extract(CsIfStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckIfStatement, ifStatement: a)
   of "ThisExpression":
       var a = extract(CsThisExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckThisExpression, thisExpression: a)
   of "TypeArgumentList":
       var a = extract(CsTypeArgumentList, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTypeArgumentList, typeArgumentList: a)
   of "GenericName":
       var a = extract(CsGenericName, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckGenericName, genericName: a)
   of "Accessor":
       var a = extract(CsAccessor, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckAccessor, accessor: a)
   of "BracketedArgumentList":
       var a = extract(CsBracketedArgumentList, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckBracketedArgumentList, bracketedArgumentList: a)
   of "ElementAccessExpression":
       var a = extract(CsElementAccessExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckElementAccessExpression, elementAccessExpression: a)
   of "AccessorList":
       var a = extract(CsAccessorList, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckAccessorList, accessorList: a)
   of "ParenthesizedExpression":
       var a = extract(CsParenthesizedExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckParenthesizedExpression, parenthesizedExpression: a)
   of "CastExpression":
       var a = extract(CsCastExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckCastExpression, castExpression: a)
   of "ArrayRankSpecifier":
       var a = extract(CsArrayRankSpecifier, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckArrayRankSpecifier, arrayRankSpecifier: a)
   of "ArrayType":
       var a = extract(CsArrayType, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckArrayType, arrayType: a)
   of "PrefixUnaryExpression":
       var a = extract(CsPrefixUnaryExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckPrefixUnaryExpression, prefixUnaryExpression: a)
   of "OmittedArraySizeExpression":
       var a = extract(CsOmittedArraySizeExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckOmittedArraySizeExpression, omittedArraySizeExpression: a)
 
   of "InitializerExpression":
       var a = extract(CsInitializerExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckInitializerExpression, initializerExpression: a)
   of "NameEquals":
       var a = extract(CsNameEquals, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckNameEquals, nameEquals: a)
   of "ThrowStatement":
       var a = extract(CsThrowStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckThrowStatement, throwStatement: a)
   of "TypeofExpression":
       var a = extract(CsTypeofExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTypeofExpression, typeofExpression: a)
   of "ElseClause":
       var a = extract(CsElseClause, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckElseClause, elseClause: a)
   of "CaseSwitchLabel":
       var a = extract(CsCaseSwitchLabel, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckCaseSwitchLabel, caseSwitchLabel: a)
   of "SwitchSection":
       var a = extract(CsSwitchSection, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckSwitchSection, switchSection: a)
   of "SimpleLambdaExpression":
       var a = extract(CsSimpleLambdaExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckSimpleLambdaExpression, simpleLambdaExpression: a)
   of "PostfixUnaryExpression":
       var a = extract(CsPostfixUnaryExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckPostfixUnaryExpression, postfixUnaryExpression: a)
   of "ArrayCreationExpression":
       var a = extract(CsArrayCreationExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckArrayCreationExpression, arrayCreationExpression: a)
   of "ArrowExpressionClause":
       var a = extract(CsArrowExpressionClause, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckArrowExpressionClause, arrowExpressionClause: a)
   of "BreakStatement":
       var a = extract(CsBreakStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckBreakStatement, breakStatement: a)
 
   of "AliasQualifiedName":
       var a = extract(CsAliasQualifiedName, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckAliasQualifiedName, aliasQualifiedName: a)
   of "TypeParameter":
       var a = extract(CsTypeParameter, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTypeParameter, typeParameter: a)
   of "AwaitExpression":
       var a = extract(CsAwaitExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckAwaitExpression, awaitExpression: a)
   of "ConditionalExpression":
       var a = extract(CsConditionalExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckConditionalExpression, conditionalExpression: a)
   of "TypeParameterList":
       var a = extract(CsTypeParameterList, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTypeParameterList, typeParameterList: a)
   of "ForEachStatement":
       var a = extract(CsForEachStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckForEachStatement, forEachStatement: a)
   of "ForStatement":
       var a = extract(CsForStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckForStatement, forStatement: a)
 
   of "InterpolatedStringText":
       var a = extract(CsInterpolatedStringText, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckInterpolatedStringText, interpolatedStringText: a)
   of "ParenthesizedLambdaExpression":
       var a = extract(CsParenthesizedLambdaExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckParenthesizedLambdaExpression, parenthesizedLambdaExpression: a)
   of "TryStatement":
       var a = extract(CsTryStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTryStatement, tryStatement: a)
   of "NullableType":
       var a = extract(CsNullableType, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckNullableType, nullableType: a)
   of "BaseExpression":
       var a = extract(CsBaseExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckBaseExpression, baseExpression: a)
   of "CatchClause":
       var a = extract(CsCatchClause, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckCatchClause, catchClause: a)
   of "ConstructorInitializer":
       var a = extract(CsConstructorInitializer, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckConstructorInitializer, constructorInitializer: a)
   of "Interpolation":
       var a = extract(CsInterpolation, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckInterpolation, interpolation: a)
   of "Catch":
       var a = extract(CsCatch, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckCatch, catch: a)
   of "NameColon":
       var a = extract(CsNameColon, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckNameColon, nameColon: a)
   of "UsingStatement":
       var a = extract(CsUsingStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckUsingStatement, usingStatement: a)
   of "TypeParameterConstraintClause":
       var a = extract(CsTypeParameterConstraintClause, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTypeParameterConstraintClause, typeParameterConstraintClause: a)
   of "TypeConstraint":
       var a = extract(CsTypeConstraint, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTypeConstraint, typeConstraint: a)
   of "SingleVariableDesignation":
       var a = extract(CsSingleVariableDesignation, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckSingleVariableDesignation, singleVariableDesignation: a)
   of "InterpolatedStringExpression":
       var a = extract(CsInterpolatedStringExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckInterpolatedStringExpression, interpolatedStringExpression: a)
   of "ImplicitArrayCreationExpression":
       var a = extract(CsImplicitArrayCreationExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckImplicitArrayCreationExpression, implicitArrayCreationExpression: a)
   of "WhileStatement":
       var a = extract(CsWhileStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckWhileStatement, whileStatement: a)
 
   of "DeclarationExpression":
       var a = extract(CsDeclarationExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckDeclarationExpression, declarationExpression: a)
   of "ConditionalAccessExpression":
       var a = extract(CsConditionalAccessExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckConditionalAccessExpression, conditionalAccessExpression: a)
   of "SwitchStatement":
       var a = extract(CsSwitchStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckSwitchStatement, switchStatement: a)
   of "MemberBindingExpression":
       var a = extract(CsMemberBindingExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckMemberBindingExpression, memberBindingExpression: a)
   of "DefaultExpression":
       var a = extract(CsDefaultExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckDefaultExpression, defaultExpression: a)
   of "PointerType":
       var a = extract(CsPointerType, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckPointerType, pointerType: a)
   of "Interface":
       var a = extract(CsInterface, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckInterface, cinterface: a)
   of "ContinueStatement":
       var a = extract(CsContinueStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckContinueStatement, continueStatement: a)
   of "FinallyClause":
       var a = extract(CsFinallyClause, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckFinallyClause, finallyClause: a)
   of "DefaultSwitchLabel":
       var a = extract(CsDefaultSwitchLabel, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckDefaultSwitchLabel, defaultSwitchLabel: a)
   of "YieldStatement":
       var a = extract(CsYieldStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckYieldStatement, yieldStatement: a)
   of "AnonymousObjectMemberDeclarator":
       var a = extract(CsAnonymousObjectMemberDeclarator, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckAnonymousObjectMemberDeclarator, anonymousObjectMemberDeclarator: a)
   of "CheckedExpression":
       var a = extract(CsCheckedExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckCheckedExpression, checkedExpression: a)
   of "Struct":
       var a = extract(CsStruct, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckStruct, struct: a)
   of "IsPatternExpression":
       var a = extract(CsIsPatternExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckIsPatternExpression, isPatternExpression: a)
   of "LockStatement":
       var a = extract(CsLockStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckLockStatement, lockStatement: a)
   of "DeclarationPattern":
       var a = extract(CsDeclarationPattern, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckDeclarationPattern, declarationPattern: a)
   of "ThrowExpression":
       var a = extract(CsThrowExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckThrowExpression, throwExpression: a)
   of "ConstantPattern":
       var a = extract(CsConstantPattern, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckConstantPattern, constantPattern: a)
 
   of "RefType":
       var a = extract(CsRefType, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckRefType, refType: a)
   of "RefExpression":
       var a = extract(CsRefExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckRefExpression, refExpression: a)
   of "ClassOrStructConstraint":
       var a = extract(CsClassOrStructConstraint, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckClassOrStructConstraint, classOrStructConstraint: a)
   of "OmittedTypeArgument":
       var a = extract(CsOmittedTypeArgument, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckOmittedTypeArgument, omittedTypeArgument: a)
   of "TupleElement":
       var a = extract(CsTupleElement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTupleElement, tupleElement: a)
   of "Operator":
       var a = extract(CsOperator, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckOperator, operator: a)
   of "EventField":
       var a = extract(CsEventField, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckEventField, eventField: a)
   of "Delegate":
       var a = extract(CsDelegate, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckDelegate, delegate: a)
   of "ImplicitElementAccess":
       var a = extract(CsImplicitElementAccess, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckImplicitElementAccess, implicitElementAccess: a)
   of "AnonymousMethodExpression":
       var a = extract(CsAnonymousMethodExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckAnonymousMethodExpression, anonymousMethodExpression: a)
   of "TupleExpression":
       var a = extract(CsTupleExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTupleExpression, tupleExpression: a)
   of "AnonymousObjectCreationExpression":
       var a = extract(CsAnonymousObjectCreationExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckAnonymousObjectCreationExpression, anonymousObjectCreationExpression: a)
   of "BracketedParameterList":
       var a = extract(CsBracketedParameterList, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckBracketedParameterList, bracketedParameterList: a)
   of "Event":
       var a = extract(CsEvent, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckEvent, event: a)
   of "GotoStatement":
       var a = extract(CsGotoStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckGotoStatement, gotoStatement: a)
   of "DoStatement":
       var a = extract(CsDoStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckDoStatement, doStatement: a)
   of "GlobalStatement":
       var a = extract(CsGlobalStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckGlobalStatement, globalStatement: a)
   of "IncompleteMember":
       var a = extract(CsIncompleteMember, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckIncompleteMember, incompleteMember: a)
   of "LocalFunctionStatement":
       var a = extract(CsLocalFunctionStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckLocalFunctionStatement, localFunctionStatement: a)
 
   of "ConversionOperator":
       var a = extract(CsConversionOperator, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckConversionOperator, conversionOperator: a)
   of "TupleType":
       var a = extract(CsTupleType, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTupleType, tupleType: a)
   of "FixedStatement":
       var a = extract(CsFixedStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckFixedStatement, fixedStatement: a)
   of "EmptyStatement":
       var a = extract(CsEmptyStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckEmptyStatement, emptyStatement: a)
   of "SizeofExpression":
       var a = extract(CsSizeofExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckSizeofExpression, sizeofExpression: a)
   of "QueryBody":
       var a = extract(CsQueryBody, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckQueryBody, queryBody: a)
   of "CheckedStatement":
       var a = extract(CsCheckedStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckCheckedStatement, checkedStatement: a)
   of "QueryExpression":
       var a = extract(CsQueryExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckQueryExpression, queryExpression: a)
   of "CasePatternSwitchLabel":
       var a = extract(CsCasePatternSwitchLabel, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckCasePatternSwitchLabel, casePatternSwitchLabel: a)
   of "LabeledStatement":
       var a = extract(CsLabeledStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckLabeledStatement, labeledStatement: a)
   of "ConstructorConstraint":
       var a = extract(CsConstructorConstraint, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckConstructorConstraint, constructorConstraint: a)
   of "UnsafeStatement":
       var a = extract(CsUnsafeStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckUnsafeStatement, unsafeStatement: a)
   of "ParenthesizedVariableDesignation":
       var a = extract(CsParenthesizedVariableDesignation, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckParenthesizedVariableDesignation, parenthesizedVariableDesignation: a)
   of "InterpolationFormatClause":
       var a = extract(CsInterpolationFormatClause, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckInterpolationFormatClause, interpolationFormatClause: a)
   of "Destructor":
       var a = extract(CsDestructor, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckDestructor, destructor: a)
   of "DiscardDesignation":
       var a = extract(CsDiscardDesignation, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckDiscardDesignation, discardDesignation: a)
   of "StackAllocArrayCreationExpression":
       var a = extract(CsStackAllocArrayCreationExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckStackAllocArrayCreationExpression, stackAllocArrayCreationExpression: a)
   of "WhenClause":
       var a = extract(CsWhenClause, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckWhenClause, whenClause: a)
 
   of "ForEachVariableStatement":
       var a = extract(CsForEachVariableStatement, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckForEachVariableStatement, forEachVariableStatement: a)
   of "LetClause":
       var a = extract(CsLetClause, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckLetClause, letClause: a)
   of "ElementBindingExpression":
       var a = extract(CsElementBindingExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckElementBindingExpression, elementBindingExpression: a)
   of "CatchFilterClause":
       var a = extract(CsCatchFilterClause, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckCatchFilterClause, catchFilterClause: a)
   of "Ordering":
       var a = extract(CsOrdering, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckOrdering, ordering: a)
   of "InterpolationAlignmentClause":
       var a = extract(CsInterpolationAlignmentClause, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckInterpolationAlignmentClause, interpolationAlignmentClause: a)
   of "QueryContinuation":
       var a = extract(CsQueryContinuation, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckQueryContinuation, queryContinuation: a)
   of "ExternAliasDirective":
       var a = extract(CsExternAliasDirective, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckExternAliasDirective, externAliasDirective: a)
   of "MakeRefExpression":
       var a = extract(CsMakeRefExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckMakeRefExpression, makeRefExpression: a)
   of "RefValueExpression":
       var a = extract(CsRefValueExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckRefValueExpression, refValueExpression: a)
   of "RefTypeExpression":
       var a = extract(CsRefTypeExpression, info)#, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckRefTypeExpression, refTypeExpression: a)
   of "Block":
       var a = extract(CsBlock, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckBlock, cblock: a)
   of "Variable":
       var a = extract(CsVariable, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckVariable, variable: a)
   of "BinaryPattern":
       var a = extract(CsBinaryPattern, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckBinaryPattern, binaryPattern: a)
   of "DiscardPattern":
       var a = extract(CsDiscardPattern, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckDiscardPattern, discardPattern: a)
   of "FunctionPointerType":
       var a = extract(CsFunctionPointerType, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckFunctionPointerType, functionPointerType: a)
   of "ImplicitObjectCreationExpression":
       var a = extract(CsImplicitObjectCreationExpression, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckImplicitObjectCreationExpression, implicitObjectCreationExpression: a)
   of "MemberAccessExpression":
       var a = extract(CsMemberAccessExpression, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckMemberAccessExpression, memberAccessExpression: a)
 
   of "ParenthesizedPattern":
       var a = extract(CsParenthesizedPattern, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckParenthesizedPattern, parenthesizedPattern: a)
   of "PositionalPatternClause":
       var a = extract(CsPositionalPatternClause, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckPositionalPatternClause, positionalPatternClause: a)
   of "PrimaryConstructorBaseType":
       var a = extract(CsPrimaryConstructorBaseType, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckPrimaryConstructorBaseType, primaryConstructorBaseType: a)
   of "PropertyPatternClause":
       var a = extract(CsPropertyPatternClause, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckPropertyPatternClause, propertyPatternClause: a)
   of "RangeExpression":
       var a = extract(CsRangeExpression, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckRangeExpression, rangeExpression: a)
   of "Record":
       var a = extract(CsRecord, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckRecord, record: a)
   of "RecursivePattern":
       var a = extract(CsRecursivePattern, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckRecursivePattern, recursivePattern: a)
   of "RelationalPattern":
       var a = extract(CsRelationalPattern, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckRelationalPattern, relationalPattern: a)
   of "Subpattern":
       var a = extract(CsSubpattern, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckSubpattern, subpattern: a)
   of "SwitchExpression":
       var a = extract(CsSwitchExpression, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckSwitchExpression, switchExpression: a)
   of "SwitchExpressionArm":
       var a = extract(CsSwitchExpressionArm, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckSwitchExpressionArm, switchExpressionArm: a)
   of "TypePattern":
       var a = extract(CsTypePattern, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckTypePattern, typePattern: a)
   of "UnaryPattern":
       var a = extract(CsUnaryPattern, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckUnaryPattern, unaryPattern: a)
   of "VarPattern":
       var a = extract(CsVarPattern, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckVarPattern, varPattern: a)
   of "WithExpression":
       var a = extract(CsWithExpression, info, data);
-      a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+      a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
       result = Construct(kind: ckWithExpression, withExpression: a)
 
 # ## end of some regex magic
   of "ConstructorDeclaration":
     var a = extract(CsConstructor,info)
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind:ckConstructor, constructor: a)
   of "IndexerDeclaration":
     var a = extract(CsIndexer,info)
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckIndexer, indexer:a)
   of "AccessorDeclaration":
     var a = extract(CsAccessor,info)
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind:ckAccessor, accessor:a)
   of "PropertyDeclaration":
-    var a = extract(CsProperty,info); a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    var a = extract(CsProperty,info); a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind:ckProperty, property:a)
   of "FieldDeclaration":
-    var a = extract(CsField, info); a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    var a = extract(CsField, info); a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind:ckField, field:a)
   of "VariableDeclaration":
     var a = extract(CsVariable, info, data);
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckVariable, variable: a)
   of "VariableDeclarator":
     var a = extract(CsVariableDeclarator, info);
-    a.id = some(id); assert not a.typ.isEmptyOrWhitespace
+    a.id = some(id); assert not a.typ.isEmptyOrWhitespace; a.src = data.sourceCode
     result = Construct(kind: ckVariableDeclarator, variableDeclarator: a)
 
   # parts that should have no objects, but instead are part of fields or even unneeded.
diff --git a/type_utils.nim b/type_utils.nim
new file mode 100644
index 0000000..6fd1fdd
--- /dev/null
+++ b/type_utils.nim
@@ -0,0 +1,88 @@
+import options, sequtils, strutils
+import common_utils
+import constructs/[justtypes,cs_root]
+proc getLastClass*(ns: CsNamespace): Option[CsClass] =
+  # echo ns
+  if ns.classes.len == 0:
+    result = none(CsClass)
+  else:
+    result = some(ns.classes.last)
+
+proc getLastMethod*(cls: CsClass): Option[CsMethod] =
+  if cls.methods.len == 0: return
+  else:
+    return some(cls.methods.last)
+
+proc getLastCtor*(cls: CsClass): Option[CsConstructor] =
+  if cls.ctors.len == 0: return
+  else:
+    return some(cls.ctors.last)
+
+import tables
+proc getCurrentNs*(root:var CsRoot): (string, CsNamespace) =
+  var p = nsPath(root)
+  if p == "": p = "default"
+  # echo p
+  assert root.nsTables.hasKey(p)
+  let ns = root.nsTables[p]
+  result = (p, ns)
+
+import options
+
+proc getLastProperty(c: CsClass): Option[CsProperty] =
+  assert c.lastAddedTo.isSome
+  case c.lastAddedTo.get
+  of ClassParts.Properties:
+    # echo "~~~" & c.properties.mapIt(it.name)
+    if c.properties.isEmpty:
+      result = none(CsProperty)
+    else:
+      assert c.properties.len > 0
+      var last = c.properties[^1]
+      result = some(last)
+
+  else: assert false, "Unsupported"
+
+
+
+proc getLastProperty*(ns: CsNamespace): Option[CsProperty] =
+  assert ns.lastAddedTo.isSome
+  case ns.lastAddedTo.get
+  of NamespaceParts.Interfaces: discard # TODO
+  of NamespaceParts.Classes:
+    let c = ns.getLastClass()
+    if c.isNone: result = none(CsProperty)
+    else:
+      result = c.get.getLastProperty()
+  of [NamespaceParts.Enums, NamespaceParts.Unset, NamespaceParts.Using]: discard
+
+proc getLastProperty*(root: var CsRoot): Option[CsProperty] =
+  var (_, ns) = root.getCurrentNs
+  result = ns.getLastProperty()
+
+# ===
+
+
+proc getIndexer(c: CsClass): Option[CsIndexer] =
+  if not c.hasIndexer():
+    echo "no indexer in class"
+    result = none(CsIndexer)
+  else:
+    result = some(c.indexer)
+
+proc getLastIndexer*(ns: CsNamespace): Option[CsIndexer] =
+  assert ns.lastAddedTo.isSome
+  case ns.lastAddedTo.get
+  of NamespaceParts.Classes:
+    let c = ns.getLastClass()
+    if c.isNone:
+      echo "no last class"
+      result = none(CsIndexer)
+    else:
+      result = c.get.getIndexer()
+  of [NamespaceParts.Interfaces, NamespaceParts.Unset, NamespaceParts.Enums,NamespaceParts.Using]: discard
+
+proc getLastIndexer*(root: var CsRoot): Option[CsIndexer] =
+  var (_, ns) = root.getCurrentNs
+  result = ns.getLastIndexer()
+
diff --git a/writer.nim b/writer.nim
index 3c6497a..0b190f1 100644
--- a/writer.nim
+++ b/writer.nim
@@ -35,6 +35,6 @@ proc main() =
       var root = newCs(CsRoot) # only one root to collect all the namespaces.
       handleMany(fi, root, files)
       writeAll(inputFolder, root)
-    echo "finished"
+    echo "finished: " & inputFolder
 
 main()
diff --git a/writer_utils.nim b/writer_utils.nim
index 9b09c85..1dc9f8d 100644
--- a/writer_utils.nim
+++ b/writer_utils.nim
@@ -6,7 +6,7 @@ import strutils, os, json
 # var currentRoot*: CsRoot
 
 proc upcomingLines*(jsn:JsonNode):seq[string] =
-  let x = jsn["Lines"].getElems() 
+  let x = jsn["Lines"].getElems()
   for ln in x:
     if ln["KindStr"].getStr() == "Decl":
       result.add ln["Declaration"].getStr()
@@ -94,17 +94,19 @@ proc writeAll*(dir: string; root: CsRoot) =
     for (d, output) in whatToDo:
       doWrite(d, output)
 
-
-
-
 import json, algorithm
 
+import system
+proc handleOne(root:var CsRoot; file:string) =
+  var contents = file.readFile()
+  var linesJson = json.parseJson(contents)
+  let upcoming = upcomingLines(linesJson)
+  parseExecFile(root, linesJson, upcoming)
+
 proc handleJustOne*(inputFolder: string; root: var CsRoot;
     file: string) =
   echo "working on: " & file
-  let linesJson = parseFile(file)
-  let upcoming = upcomingLines(linesJson)
-  parseExecFile(root, linesJson, upcoming)
+  handleOne(root,file)
 
 proc stats(i: int; f: string; len: int; sw: DateTime): string =
   let x = i + 1
@@ -122,8 +124,5 @@ proc handleMany*(inputFolder: string; root: var CsRoot; files: seq[string]) =
 
     let str = stats(i, f, files.len, sw)
     write(stdout, str)
-
-    let linesJson = parseFile(f)
-    let upcoming = upcomingLines(linesJson)
-    parseExecFile(root, linesJson, upcoming)
+    handleOne(root,f)
 
--
libgit2 0.24.6

